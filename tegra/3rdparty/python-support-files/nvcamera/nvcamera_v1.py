# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_nvcamera_v1', [dirname(__file__)])
        except ImportError:
            import _nvcamera_v1
            return _nvcamera_v1
        if fp is not None:
            try:
                _mod = imp.load_module('_nvcamera_v1', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _nvcamera_v1 = swig_import_helper()
    del swig_import_helper
else:
    import _nvcamera_v1
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


# Copyright (c) 2009-2014, NVIDIA Corporation.  All rights reserved.
#
# NVIDIA Corporation and its licensors retain all intellectual property
# and proprietary rights in and to this software, related documentation
# and any modifications thereto.  Any use, reproduction, disclosure or
# distribution of this software and related documentation without an express
# license agreement from NVIDIA Corporation is strictly prohibited.
#

camobj_graph = _nvcamera_v1.camobj_graph
camobj_camera = _nvcamera_v1.camobj_camera
camobj_video = _nvcamera_v1.camobj_video
camobj_image = _nvcamera_v1.camobj_image
camobj_audio = _nvcamera_v1.camobj_audio
camobj_writer = _nvcamera_v1.camobj_writer
camobj_fs = _nvcamera_v1.camobj_fs
cop_audio = _nvcamera_v1.cop_audio
cop_close = _nvcamera_v1.cop_close
cop_connect = _nvcamera_v1.cop_connect
cop_copy = _nvcamera_v1.cop_copy
cop_disconnect = _nvcamera_v1.cop_disconnect
cop_getattr = _nvcamera_v1.cop_getattr
cop_halfpress = _nvcamera_v1.cop_halfpress
cop_hp_release = _nvcamera_v1.cop_hp_release
cop_init = _nvcamera_v1.cop_init
cop_mkdir = _nvcamera_v1.cop_mkdir
cop_pause = _nvcamera_v1.cop_pause
cop_preview = _nvcamera_v1.cop_preview
cop_run = _nvcamera_v1.cop_run
cop_set_imager = _nvcamera_v1.cop_set_imager
cop_setattr = _nvcamera_v1.cop_setattr
cop_start = _nvcamera_v1.cop_start
cop_still = _nvcamera_v1.cop_still
cop_still_stop = _nvcamera_v1.cop_still_stop
cop_stop = _nvcamera_v1.cop_stop
cop_video = _nvcamera_v1.cop_video
cop_start_video = _nvcamera_v1.cop_start_video
cop_stop_video = _nvcamera_v1.cop_stop_video
cop_wait_event = _nvcamera_v1.cop_wait_event
cop_zoom = _nvcamera_v1.cop_zoom
cop_zoom_stop = _nvcamera_v1.cop_zoom_stop
cop_set_raw_image = _nvcamera_v1.cop_set_raw_image
CamConst_CAP_READY = _nvcamera_v1.CamConst_CAP_READY
CamConst_CAP_FILE_READY = _nvcamera_v1.CamConst_CAP_FILE_READY
CamConst_AF_READY = _nvcamera_v1.CamConst_AF_READY
CamConst_AF_TIMEOUT = _nvcamera_v1.CamConst_AF_TIMEOUT
CamConst_AE_READY = _nvcamera_v1.CamConst_AE_READY
CamConst_AE_TIMEOUT = _nvcamera_v1.CamConst_AE_TIMEOUT
CamConst_AWB_READY = _nvcamera_v1.CamConst_AWB_READY
CamConst_AWB_TIMEOUT = _nvcamera_v1.CamConst_AWB_TIMEOUT
CamConst_PREVIEW_PAUSED = _nvcamera_v1.CamConst_PREVIEW_PAUSED
CamConst_PREVIEW_EOS = _nvcamera_v1.CamConst_PREVIEW_EOS
CamConst_FIRST_PREVIEW_FRAME = _nvcamera_v1.CamConst_FIRST_PREVIEW_FRAME
CamConst_ALL_CAPTURE_DONE = _nvcamera_v1.CamConst_ALL_CAPTURE_DONE
CamConst_POWER_ON_COMPLETE = _nvcamera_v1.CamConst_POWER_ON_COMPLETE
CamConst_ALGS = _nvcamera_v1.CamConst_ALGS
GraphType_DShow = _nvcamera_v1.GraphType_DShow
GraphType_OMX = _nvcamera_v1.GraphType_OMX
camtype_nil = _nvcamera_v1.camtype_nil
camtype_int = _nvcamera_v1.camtype_int
camtype_float = _nvcamera_v1.camtype_float
camtype_string = _nvcamera_v1.camtype_string
camtype_array = _nvcamera_v1.camtype_array
camtype_diag = _nvcamera_v1.camtype_diag
camtype_error = _nvcamera_v1.camtype_error
NvError_Success = _nvcamera_v1.NvError_Success
NvError_NotImplemented = _nvcamera_v1.NvError_NotImplemented
NvError_NotSupported = _nvcamera_v1.NvError_NotSupported
NvError_NotInitialized = _nvcamera_v1.NvError_NotInitialized
NvError_BadParameter = _nvcamera_v1.NvError_BadParameter
NvError_Timeout = _nvcamera_v1.NvError_Timeout
NvError_InsufficientMemory = _nvcamera_v1.NvError_InsufficientMemory
NvError_ReadOnlyAttribute = _nvcamera_v1.NvError_ReadOnlyAttribute
NvError_InvalidState = _nvcamera_v1.NvError_InvalidState
NvError_InvalidAddress = _nvcamera_v1.NvError_InvalidAddress
NvError_InvalidSize = _nvcamera_v1.NvError_InvalidSize
NvError_BadValue = _nvcamera_v1.NvError_BadValue
NvError_AlreadyAllocated = _nvcamera_v1.NvError_AlreadyAllocated
NvError_Busy = _nvcamera_v1.NvError_Busy
NvError_ModuleNotPresent = _nvcamera_v1.NvError_ModuleNotPresent
NvError_ResourceError = _nvcamera_v1.NvError_ResourceError
NvError_CountMismatch = _nvcamera_v1.NvError_CountMismatch
NvError_InsufficientVideoMemory = _nvcamera_v1.NvError_InsufficientVideoMemory
NvError_BadSurfaceColorScheme = _nvcamera_v1.NvError_BadSurfaceColorScheme
NvError_InvalidSurface = _nvcamera_v1.NvError_InvalidSurface
NvError_SurfaceNotSupported = _nvcamera_v1.NvError_SurfaceNotSupported
NvError_DispInitFailed = _nvcamera_v1.NvError_DispInitFailed
NvError_DispAlreadyAttached = _nvcamera_v1.NvError_DispAlreadyAttached
NvError_DispTooManyDisplays = _nvcamera_v1.NvError_DispTooManyDisplays
NvError_DispNoDisplaysAttached = _nvcamera_v1.NvError_DispNoDisplaysAttached
NvError_DispModeNotSupported = _nvcamera_v1.NvError_DispModeNotSupported
NvError_DispNotFound = _nvcamera_v1.NvError_DispNotFound
NvError_DispAttachDissallowed = _nvcamera_v1.NvError_DispAttachDissallowed
NvError_DispTypeNotSupported = _nvcamera_v1.NvError_DispTypeNotSupported
NvError_DispAuthenticationFailed = _nvcamera_v1.NvError_DispAuthenticationFailed
NvError_DispNotAttached = _nvcamera_v1.NvError_DispNotAttached
NvError_DispSamePwrState = _nvcamera_v1.NvError_DispSamePwrState
NvError_DispEdidFailure = _nvcamera_v1.NvError_DispEdidFailure
NvError_DispDsiReadAckError = _nvcamera_v1.NvError_DispDsiReadAckError
NvError_DispDsiReadInvalidResp = _nvcamera_v1.NvError_DispDsiReadInvalidResp
NvError_FileWriteFailed = _nvcamera_v1.NvError_FileWriteFailed
NvError_FileReadFailed = _nvcamera_v1.NvError_FileReadFailed
NvError_EndOfFile = _nvcamera_v1.NvError_EndOfFile
NvError_FileOperationFailed = _nvcamera_v1.NvError_FileOperationFailed
NvError_DirOperationFailed = _nvcamera_v1.NvError_DirOperationFailed
NvError_EndOfDirList = _nvcamera_v1.NvError_EndOfDirList
NvError_ConfigVarNotFound = _nvcamera_v1.NvError_ConfigVarNotFound
NvError_InvalidConfigVar = _nvcamera_v1.NvError_InvalidConfigVar
NvError_LibraryNotFound = _nvcamera_v1.NvError_LibraryNotFound
NvError_SymbolNotFound = _nvcamera_v1.NvError_SymbolNotFound
NvError_MemoryMapFailed = _nvcamera_v1.NvError_MemoryMapFailed
NvError_IoctlFailed = _nvcamera_v1.NvError_IoctlFailed
NvError_AccessDenied = _nvcamera_v1.NvError_AccessDenied
NvError_DeviceNotFound = _nvcamera_v1.NvError_DeviceNotFound
NvError_KernelDriverNotFound = _nvcamera_v1.NvError_KernelDriverNotFound
NvError_FileNotFound = _nvcamera_v1.NvError_FileNotFound
NvError_SpiReceiveError = _nvcamera_v1.NvError_SpiReceiveError
NvError_SpiTransmitError = _nvcamera_v1.NvError_SpiTransmitError
NvError_HsmmcCardNotPresent = _nvcamera_v1.NvError_HsmmcCardNotPresent
NvError_HsmmcControllerBusy = _nvcamera_v1.NvError_HsmmcControllerBusy
NvError_HsmmcAutoDetectCard = _nvcamera_v1.NvError_HsmmcAutoDetectCard
NvError_SdioCardNotPresent = _nvcamera_v1.NvError_SdioCardNotPresent
NvError_SdioInstanceTaken = _nvcamera_v1.NvError_SdioInstanceTaken
NvError_SdioControllerBusy = _nvcamera_v1.NvError_SdioControllerBusy
NvError_SdioReadFailed = _nvcamera_v1.NvError_SdioReadFailed
NvError_SdioWriteFailed = _nvcamera_v1.NvError_SdioWriteFailed
NvError_SdioBadBlockSize = _nvcamera_v1.NvError_SdioBadBlockSize
NvError_SdioClockNotConfigured = _nvcamera_v1.NvError_SdioClockNotConfigured
NvError_SdioSdhcPatternIntegrityFailed = _nvcamera_v1.NvError_SdioSdhcPatternIntegrityFailed
NvError_SdioCommandFailed = _nvcamera_v1.NvError_SdioCommandFailed
NvError_SdioCardAlwaysPresent = _nvcamera_v1.NvError_SdioCardAlwaysPresent
NvError_SdioAutoDetectCard = _nvcamera_v1.NvError_SdioAutoDetectCard
NvError_UsbInvalidEndpoint = _nvcamera_v1.NvError_UsbInvalidEndpoint
NvError_UsbfTxfrActive = _nvcamera_v1.NvError_UsbfTxfrActive
NvError_UsbfTxfrComplete = _nvcamera_v1.NvError_UsbfTxfrComplete
NvError_UsbfTxfrFail = _nvcamera_v1.NvError_UsbfTxfrFail
NvError_UsbfEpStalled = _nvcamera_v1.NvError_UsbfEpStalled
NvError_UsbfCableDisConnected = _nvcamera_v1.NvError_UsbfCableDisConnected
NvError_UartOverrun = _nvcamera_v1.NvError_UartOverrun
NvError_UartFraming = _nvcamera_v1.NvError_UartFraming
NvError_UartParity = _nvcamera_v1.NvError_UartParity
NvError_UartBreakReceived = _nvcamera_v1.NvError_UartBreakReceived
NvError_I2cReadFailed = _nvcamera_v1.NvError_I2cReadFailed
NvError_I2cWriteFailed = _nvcamera_v1.NvError_I2cWriteFailed
NvError_I2cDeviceNotFound = _nvcamera_v1.NvError_I2cDeviceNotFound
NvError_I2cInternalError = _nvcamera_v1.NvError_I2cInternalError
NvError_I2cArbitrationFailed = _nvcamera_v1.NvError_I2cArbitrationFailed
NvError_IdeHwError = _nvcamera_v1.NvError_IdeHwError
NvError_IdeReadError = _nvcamera_v1.NvError_IdeReadError
NvError_IdeWriteError = _nvcamera_v1.NvError_IdeWriteError
NvError_OwrReadFailed = _nvcamera_v1.NvError_OwrReadFailed
NvError_OwrWriteFailed = _nvcamera_v1.NvError_OwrWriteFailed
NvError_OwrBitTransferFailed = _nvcamera_v1.NvError_OwrBitTransferFailed
NvError_OwrInvalidOffset = _nvcamera_v1.NvError_OwrInvalidOffset
NvError_InvalidOperation = _nvcamera_v1.NvError_InvalidOperation
NvError_RmInitFailed = _nvcamera_v1.NvError_RmInitFailed
NvError_RmChannelInitFailure = _nvcamera_v1.NvError_RmChannelInitFailure
NvError_RmStreamInitFailure = _nvcamera_v1.NvError_RmStreamInitFailure
NvError_RmSyncPointAllocFailure = _nvcamera_v1.NvError_RmSyncPointAllocFailure
NvError_ResourceAlreadyInUse = _nvcamera_v1.NvError_ResourceAlreadyInUse
NvError_DmaBusy = _nvcamera_v1.NvError_DmaBusy
NvError_InvalidSourceId = _nvcamera_v1.NvError_InvalidSourceId
NvError_DmaChannelNotAvailable = _nvcamera_v1.NvError_DmaChannelNotAvailable
NvError_NoConnectedImager = _nvcamera_v1.NvError_NoConnectedImager
NvError_UnsupportedResolution = _nvcamera_v1.NvError_UnsupportedResolution
NvError_I2CCommunicationError = _nvcamera_v1.NvError_I2CCommunicationError
NvError_IspConfigFileParseError = _nvcamera_v1.NvError_IspConfigFileParseError
NvError_TooDark = _nvcamera_v1.NvError_TooDark
NvError_InvalidIspConfigAttribute = _nvcamera_v1.NvError_InvalidIspConfigAttribute
NvError_InvalidIspConfigAttributeElement = _nvcamera_v1.NvError_InvalidIspConfigAttributeElement
NvError_IspConfigSyntaxError = _nvcamera_v1.NvError_IspConfigSyntaxError
NvError_ImagerVersionNotSupported = _nvcamera_v1.NvError_ImagerVersionNotSupported
NvError_CorruptedBuffer = _nvcamera_v1.NvError_CorruptedBuffer
NvError_UnderConfident = _nvcamera_v1.NvError_UnderConfident
NvError_TestApplicationFailed = _nvcamera_v1.NvError_TestApplicationFailed
NvError_TestNoUserInput = _nvcamera_v1.NvError_TestNoUserInput
NvError_TestCommandLineError = _nvcamera_v1.NvError_TestCommandLineError
NvError_TestDataVerificationFailed = _nvcamera_v1.NvError_TestDataVerificationFailed
NvError_TestServerFileReadFailed = _nvcamera_v1.NvError_TestServerFileReadFailed
NvError_TestServerInvalidAddress = _nvcamera_v1.NvError_TestServerInvalidAddress
NvError_TestServerMemoryLimitExceeded = _nvcamera_v1.NvError_TestServerMemoryLimitExceeded
NvError_ColorFormatNotSupported = _nvcamera_v1.NvError_ColorFormatNotSupported
NvError_TransportPortAlreadyExist = _nvcamera_v1.NvError_TransportPortAlreadyExist
NvError_TransportMessageBoxEmpty = _nvcamera_v1.NvError_TransportMessageBoxEmpty
NvError_TransportMessageBoxFull = _nvcamera_v1.NvError_TransportMessageBoxFull
NvError_TransportConnectionFailed = _nvcamera_v1.NvError_TransportConnectionFailed
NvError_TransportNotConnected = _nvcamera_v1.NvError_TransportNotConnected
NvError_NandReadFailed = _nvcamera_v1.NvError_NandReadFailed
NvError_NandProgramFailed = _nvcamera_v1.NvError_NandProgramFailed
NvError_NandEraseFailed = _nvcamera_v1.NvError_NandEraseFailed
NvError_NandCopyBackFailed = _nvcamera_v1.NvError_NandCopyBackFailed
NvError_NandOperationFailed = _nvcamera_v1.NvError_NandOperationFailed
NvError_NandBusy = _nvcamera_v1.NvError_NandBusy
NvError_NandNotOpened = _nvcamera_v1.NvError_NandNotOpened
NvError_NandAlreadyOpened = _nvcamera_v1.NvError_NandAlreadyOpened
NvError_NandBadOperationRequest = _nvcamera_v1.NvError_NandBadOperationRequest
NvError_NandCommandQueueError = _nvcamera_v1.NvError_NandCommandQueueError
NvError_NandReadEccFailed = _nvcamera_v1.NvError_NandReadEccFailed
NvError_NandFlashNotSupported = _nvcamera_v1.NvError_NandFlashNotSupported
NvError_NandLockFailed = _nvcamera_v1.NvError_NandLockFailed
NvError_NandErrorThresholdReached = _nvcamera_v1.NvError_NandErrorThresholdReached
NvError_NandWriteFailed = _nvcamera_v1.NvError_NandWriteFailed
NvError_NandBadBlock = _nvcamera_v1.NvError_NandBadBlock
NvError_NandBadState = _nvcamera_v1.NvError_NandBadState
NvError_NandBlockIsLocked = _nvcamera_v1.NvError_NandBlockIsLocked
NvError_NandNoFreeBlock = _nvcamera_v1.NvError_NandNoFreeBlock
NvError_NandTTFailed = _nvcamera_v1.NvError_NandTTFailed
NvError_NandTLFailed = _nvcamera_v1.NvError_NandTLFailed
NvError_NandTLNoBlockAssigned = _nvcamera_v1.NvError_NandTLNoBlockAssigned
NvError_WinSysBadDisplay = _nvcamera_v1.NvError_WinSysBadDisplay
NvError_WinSysNoDevice = _nvcamera_v1.NvError_WinSysNoDevice
NvError_WinSysBadDrawable = _nvcamera_v1.NvError_WinSysBadDrawable
NvError_BLServerFileReadFailed = _nvcamera_v1.NvError_BLServerFileReadFailed
NvError_BLServerInvalidAddress = _nvcamera_v1.NvError_BLServerInvalidAddress
NvError_BLServerInvalidElfFile = _nvcamera_v1.NvError_BLServerInvalidElfFile
NvError_BLServerConnectionFailed = _nvcamera_v1.NvError_BLServerConnectionFailed
NvError_BLServerMemoryLimitExceeded = _nvcamera_v1.NvError_BLServerMemoryLimitExceeded
NvError_AudioMixerPinTypeNotSupported = _nvcamera_v1.NvError_AudioMixerPinTypeNotSupported
NvError_AudioMixerDirectionNotSupported = _nvcamera_v1.NvError_AudioMixerDirectionNotSupported
NvError_AudioMixerNoMorePinsAvailable = _nvcamera_v1.NvError_AudioMixerNoMorePinsAvailable
NvError_AudioMixerBadPinNumber = _nvcamera_v1.NvError_AudioMixerBadPinNumber
NvError_VideoEncResolutionNotSupported = _nvcamera_v1.NvError_VideoEncResolutionNotSupported
NvError_JPEGEncHWError = _nvcamera_v1.NvError_JPEGEncHWError
NvError_VideoDecRetainLock = _nvcamera_v1.NvError_VideoDecRetainLock
NvError_VideoDecMataDataFound = _nvcamera_v1.NvError_VideoDecMataDataFound
NvError_VideoDecFrameDecoded = _nvcamera_v1.NvError_VideoDecFrameDecoded
NvError_VideoDecDecodedPartialFrame = _nvcamera_v1.NvError_VideoDecDecodedPartialFrame
NvError_VideoDecInsufficientBitstream = _nvcamera_v1.NvError_VideoDecInsufficientBitstream
NvError_VideoDecOutputSurfaceUnavailable = _nvcamera_v1.NvError_VideoDecOutputSurfaceUnavailable
NvError_VideoDecUnsupportedStreamFormat = _nvcamera_v1.NvError_VideoDecUnsupportedStreamFormat
NvError_VideoDecFrameDecodedPlusVideoDecEvent = _nvcamera_v1.NvError_VideoDecFrameDecodedPlusVideoDecEvent
NvError_VideoDecFailed = _nvcamera_v1.NvError_VideoDecFailed
NvError_VideoDecDecodingComplete = _nvcamera_v1.NvError_VideoDecDecodingComplete
NvError_VideoDecProvideNextIPBuffer = _nvcamera_v1.NvError_VideoDecProvideNextIPBuffer
NvError_VideoDecProvideCurrentIPBuffer = _nvcamera_v1.NvError_VideoDecProvideCurrentIPBuffer
NvError_VideoDecBypassMoreWork = _nvcamera_v1.NvError_VideoDecBypassMoreWork
NvError_PipeNotConnected = _nvcamera_v1.NvError_PipeNotConnected
NvError_ReadQNotCreated = _nvcamera_v1.NvError_ReadQNotCreated
NvError_ParserEndOfStream = _nvcamera_v1.NvError_ParserEndOfStream
NvError_ParserFailedToGetData = _nvcamera_v1.NvError_ParserFailedToGetData
NvError_InSufficientBufferSize = _nvcamera_v1.NvError_InSufficientBufferSize
NvError_ParserReadFailure = _nvcamera_v1.NvError_ParserReadFailure
NvError_ParserOpenFailure = _nvcamera_v1.NvError_ParserOpenFailure
NvError_UnSupportedStream = _nvcamera_v1.NvError_UnSupportedStream
NvError_ParserFailure = _nvcamera_v1.NvError_ParserFailure
NvError_ParserHeaderDecodeNotComplete = _nvcamera_v1.NvError_ParserHeaderDecodeNotComplete
NvError_ParserCloseFailure = _nvcamera_v1.NvError_ParserCloseFailure
NvError_ParserMarkerHit = _nvcamera_v1.NvError_ParserMarkerHit
NvError_ParserCorruptedStream = _nvcamera_v1.NvError_ParserCorruptedStream
NvError_ParserDRMLicenseNotFound = _nvcamera_v1.NvError_ParserDRMLicenseNotFound
NvError_ParserDRMFailure = _nvcamera_v1.NvError_ParserDRMFailure
NvError_ParserSeekUnSupported = _nvcamera_v1.NvError_ParserSeekUnSupported
NvError_ParserTrickModeUnSupported = _nvcamera_v1.NvError_ParserTrickModeUnSupported
NvError_ParserCoreNotCreated = _nvcamera_v1.NvError_ParserCoreNotCreated
NvError_UnSupported_VideoStream = _nvcamera_v1.NvError_UnSupported_VideoStream
NvError_UnSupported_AudioStream = _nvcamera_v1.NvError_UnSupported_AudioStream
NvError_ParserTruncatedFile = _nvcamera_v1.NvError_ParserTruncatedFile
NvError_ParserOffsetsNotFound = _nvcamera_v1.NvError_ParserOffsetsNotFound
NvError_WriterOpenFailure = _nvcamera_v1.NvError_WriterOpenFailure
NvError_WriterUnsupportedStream = _nvcamera_v1.NvError_WriterUnsupportedStream
NvError_WriterUnsupportedUserData = _nvcamera_v1.NvError_WriterUnsupportedUserData
NvError_WriterFileSizeLimitExceeded = _nvcamera_v1.NvError_WriterFileSizeLimitExceeded
NvError_WriterInsufficientMemory = _nvcamera_v1.NvError_WriterInsufficientMemory
NvError_WriterFailure = _nvcamera_v1.NvError_WriterFailure
NvError_WriterCloseFailure = _nvcamera_v1.NvError_WriterCloseFailure
NvError_WriterInitFailure = _nvcamera_v1.NvError_WriterInitFailure
NvError_WriterFileWriteLimitExceeded = _nvcamera_v1.NvError_WriterFileWriteLimitExceeded
NvError_WriterTimeLimitExceeded = _nvcamera_v1.NvError_WriterTimeLimitExceeded
NvError_ContentPipeNoData = _nvcamera_v1.NvError_ContentPipeNoData
NvError_ContentPipeNoFreeBuffers = _nvcamera_v1.NvError_ContentPipeNoFreeBuffers
NvError_ContentPipeSpareAreaInUse = _nvcamera_v1.NvError_ContentPipeSpareAreaInUse
NvError_ContentPipeEndOfStream = _nvcamera_v1.NvError_ContentPipeEndOfStream
NvError_ContentPipeNotReady = _nvcamera_v1.NvError_ContentPipeNotReady
NvError_ContentPipeInNonCachingMode = _nvcamera_v1.NvError_ContentPipeInNonCachingMode
NvError_ContentPipeInsufficientMemory = _nvcamera_v1.NvError_ContentPipeInsufficientMemory
NvError_ContentPipeNotInvalidated = _nvcamera_v1.NvError_ContentPipeNotInvalidated
NvError_UnSupportedMetadata = _nvcamera_v1.NvError_UnSupportedMetadata
NvError_MetadataSuccess = _nvcamera_v1.NvError_MetadataSuccess
NvError_MetadataFailure = _nvcamera_v1.NvError_MetadataFailure
NvError_NewMetaDataAvailable = _nvcamera_v1.NvError_NewMetaDataAvailable
NvError_RefURLAvailable = _nvcamera_v1.NvError_RefURLAvailable
NvError_TrackListInvalidTrackIndex = _nvcamera_v1.NvError_TrackListInvalidTrackIndex
NvError_TrackListError = _nvcamera_v1.NvError_TrackListError
NvError_TrackListItemStillPlayingError = _nvcamera_v1.NvError_TrackListItemStillPlayingError
NvError_TrackListNotPlaying = _nvcamera_v1.NvError_TrackListNotPlaying
NvError_Nv3pUnrecoverableProtocol = _nvcamera_v1.NvError_Nv3pUnrecoverableProtocol
NvError_Nv3pBadPacketType = _nvcamera_v1.NvError_Nv3pBadPacketType
NvError_Nv3pPacketNacked = _nvcamera_v1.NvError_Nv3pPacketNacked
NvError_Nv3pBadReceiveLength = _nvcamera_v1.NvError_Nv3pBadReceiveLength
NvError_Nv3pBadReturnData = _nvcamera_v1.NvError_Nv3pBadReturnData
NvError_AesClearSbkFailed = _nvcamera_v1.NvError_AesClearSbkFailed
NvError_AesLockSskFailed = _nvcamera_v1.NvError_AesLockSskFailed
NvError_AesDisableCryptoFailed = _nvcamera_v1.NvError_AesDisableCryptoFailed
NvError_AesKeyUnWrapFailed = _nvcamera_v1.NvError_AesKeyUnWrapFailed
NvError_AesPermissionDenied = _nvcamera_v1.NvError_AesPermissionDenied
NvError_BlockDriverIllegalIoctl = _nvcamera_v1.NvError_BlockDriverIllegalIoctl
NvError_BlockDriverOverlappedPartition = _nvcamera_v1.NvError_BlockDriverOverlappedPartition
NvError_BlockDriverNoPartition = _nvcamera_v1.NvError_BlockDriverNoPartition
NvError_BlockDriverIllegalPartId = _nvcamera_v1.NvError_BlockDriverIllegalPartId
NvError_BlockDriverWriteVerifyFailed = _nvcamera_v1.NvError_BlockDriverWriteVerifyFailed
NvError_NandBlockDriverEraseFailure = _nvcamera_v1.NvError_NandBlockDriverEraseFailure
NvError_NandBlockDriverWriteFailure = _nvcamera_v1.NvError_NandBlockDriverWriteFailure
NvError_NandBlockDriverReadFailure = _nvcamera_v1.NvError_NandBlockDriverReadFailure
NvError_NandBlockDriverLockFailure = _nvcamera_v1.NvError_NandBlockDriverLockFailure
NvError_NandRegionIllegalAddress = _nvcamera_v1.NvError_NandRegionIllegalAddress
NvError_NandRegionTableOpFailure = _nvcamera_v1.NvError_NandRegionTableOpFailure
NvError_NandBlockDriverMultiInterleave = _nvcamera_v1.NvError_NandBlockDriverMultiInterleave
NvError_NandTagAreaSearchFailure = _nvcamera_v1.NvError_NandTagAreaSearchFailure
NvError_EmmcBlockDriverLockNotSupported = _nvcamera_v1.NvError_EmmcBlockDriverLockNotSupported
NvError_EmmcBlockDriverLockUnaligned = _nvcamera_v1.NvError_EmmcBlockDriverLockUnaligned
NvError_EmmcBlockDriverIllegalStateRead = _nvcamera_v1.NvError_EmmcBlockDriverIllegalStateRead
NvError_EmmcBlockDriverIllegalStateWrite = _nvcamera_v1.NvError_EmmcBlockDriverIllegalStateWrite
NvError_EmmcCommandFailed = _nvcamera_v1.NvError_EmmcCommandFailed
NvError_EmmcReadFailed = _nvcamera_v1.NvError_EmmcReadFailed
NvError_EmmcWriteFailed = _nvcamera_v1.NvError_EmmcWriteFailed
NvError_EmmcBlockDriverEraseFailure = _nvcamera_v1.NvError_EmmcBlockDriverEraseFailure
NvError_EmmcBlockDriverIllegalAddress = _nvcamera_v1.NvError_EmmcBlockDriverIllegalAddress
NvError_EmmcBlockDriverLockFailure = _nvcamera_v1.NvError_EmmcBlockDriverLockFailure
NvError_EmmcBlockDriverBlockIsLocked = _nvcamera_v1.NvError_EmmcBlockDriverBlockIsLocked
NvError_MipiHsiTxFifoEmpty = _nvcamera_v1.NvError_MipiHsiTxFifoEmpty
NvError_MipiHsiRxFifoEmpty = _nvcamera_v1.NvError_MipiHsiRxFifoEmpty
NvError_MipiHsiBusy = _nvcamera_v1.NvError_MipiHsiBusy
NvError_MipiHsiHandleNotConfigured = _nvcamera_v1.NvError_MipiHsiHandleNotConfigured
NvError_MipiHsiTransmitError = _nvcamera_v1.NvError_MipiHsiTransmitError
NvError_MipiHsiReceiveError = _nvcamera_v1.NvError_MipiHsiReceiveError
NvError_MipiHsiTransferIncomplete = _nvcamera_v1.NvError_MipiHsiTransferIncomplete
NvError_SCCompileFail = _nvcamera_v1.NvError_SCCompileFail
NvError_DrmFailure = _nvcamera_v1.NvError_DrmFailure
NvError_DrmInvalidArg = _nvcamera_v1.NvError_DrmInvalidArg
NvError_DrmOutOfMemory = _nvcamera_v1.NvError_DrmOutOfMemory
NvError_DrmFileNotFound = _nvcamera_v1.NvError_DrmFileNotFound
NvError_DrmBufferTooSmall = _nvcamera_v1.NvError_DrmBufferTooSmall
NvError_DrmInvalidLicense = _nvcamera_v1.NvError_DrmInvalidLicense
NvError_DrmLicenseExpired = _nvcamera_v1.NvError_DrmLicenseExpired
NvError_DrmRightsNotAvailable = _nvcamera_v1.NvError_DrmRightsNotAvailable
NvError_DrmLicenseNotFound = _nvcamera_v1.NvError_DrmLicenseNotFound
NvError_DrmInvalidBindId = _nvcamera_v1.NvError_DrmInvalidBindId
NvError_DrmVersionNotSupported = _nvcamera_v1.NvError_DrmVersionNotSupported
NvError_DrmMeteringNotSupported = _nvcamera_v1.NvError_DrmMeteringNotSupported
NvError_DrmDecryptionFailed = _nvcamera_v1.NvError_DrmDecryptionFailed
NvError_SysUpdateInvalidBLVersion = _nvcamera_v1.NvError_SysUpdateInvalidBLVersion
NvError_SysUpdateInvalidChecksum = _nvcamera_v1.NvError_SysUpdateInvalidChecksum
NvError_SysUpdateBLUpdateNotAllowed = _nvcamera_v1.NvError_SysUpdateBLUpdateNotAllowed
NvSuccess = _nvcamera_v1.NvSuccess
NvError_Force32 = _nvcamera_v1.NvError_Force32

def getErrorString(*args):
  return _nvcamera_v1.getErrorString(*args)
getErrorString = _nvcamera_v1.getErrorString
NV_FALSE = _nvcamera_v1.NV_FALSE
NV_TRUE = _nvcamera_v1.NV_TRUE
attr_anr = _nvcamera_v1.attr_anr
attr_autofocus = _nvcamera_v1.attr_autofocus
attr_crop = _nvcamera_v1.attr_crop
attr_bayergains = _nvcamera_v1.attr_bayergains
attr_exposuretime = _nvcamera_v1.attr_exposuretime
attr_exposuretimerange = _nvcamera_v1.attr_exposuretimerange
attr_focuspos = _nvcamera_v1.attr_focuspos
attr_pauseaftercapture = _nvcamera_v1.attr_pauseaftercapture
attr_concurrentrawdumpflag = _nvcamera_v1.attr_concurrentrawdumpflag
attr_continuousautofocus = _nvcamera_v1.attr_continuousautofocus
attr_focuspositionphysicalrange = _nvcamera_v1.attr_focuspositionphysicalrange
attr_focuspositioninf = _nvcamera_v1.attr_focuspositioninf
attr_focuspositioninfoffset = _nvcamera_v1.attr_focuspositioninfoffset
attr_focuspositionmacro = _nvcamera_v1.attr_focuspositionmacro
attr_focuspositionmacrooffset = _nvcamera_v1.attr_focuspositionmacrooffset
attr_gainrange = _nvcamera_v1.attr_gainrange
attr_fuseid = _nvcamera_v1.attr_fuseid
attr_aeoverride = _nvcamera_v1.attr_aeoverride
attr_enableaohdr = _nvcamera_v1.attr_enableaohdr
attr_scalesize = _nvcamera_v1.attr_scalesize
class NvCamGraph(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvCamGraph, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvCamGraph, name)
    __repr__ = _swig_repr
    def build(self, *args): return _nvcamera_v1.NvCamGraph_build(self, *args)
    def run(self, *args): return _nvcamera_v1.NvCamGraph_run(self, *args)
    def stop(self, *args): return _nvcamera_v1.NvCamGraph_stop(self, *args)
    def close(self, *args): return _nvcamera_v1.NvCamGraph_close(self, *args)
    __swig_setmethods__["camInfo"] = _nvcamera_v1.NvCamGraph_camInfo_set
    __swig_getmethods__["camInfo"] = _nvcamera_v1.NvCamGraph_camInfo_get
    if _newclass:camInfo = _swig_property(_nvcamera_v1.NvCamGraph_camInfo_get, _nvcamera_v1.NvCamGraph_camInfo_set)
    __swig_setmethods__["event_mask"] = _nvcamera_v1.NvCamGraph_event_mask_set
    __swig_getmethods__["event_mask"] = _nvcamera_v1.NvCamGraph_event_mask_get
    if _newclass:event_mask = _swig_property(_nvcamera_v1.NvCamGraph_event_mask_get, _nvcamera_v1.NvCamGraph_event_mask_set)
    __swig_setmethods__["event_sem"] = _nvcamera_v1.NvCamGraph_event_sem_set
    __swig_getmethods__["event_sem"] = _nvcamera_v1.NvCamGraph_event_sem_get
    if _newclass:event_sem = _swig_property(_nvcamera_v1.NvCamGraph_event_sem_get, _nvcamera_v1.NvCamGraph_event_sem_set)
    __swig_setmethods__["impl"] = _nvcamera_v1.NvCamGraph_impl_set
    __swig_getmethods__["impl"] = _nvcamera_v1.NvCamGraph_impl_get
    if _newclass:impl = _swig_property(_nvcamera_v1.NvCamGraph_impl_get, _nvcamera_v1.NvCamGraph_impl_set)
    def __init__(self): 
        this = _nvcamera_v1.new_NvCamGraph()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvcamera_v1.delete_NvCamGraph
    __del__ = lambda self : None;
NvCamGraph_swigregister = _nvcamera_v1.NvCamGraph_swigregister
NvCamGraph_swigregister(NvCamGraph)

class NvCamTVal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvCamTVal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvCamTVal, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _nvcamera_v1.NvCamTVal_type_set
    __swig_getmethods__["type"] = _nvcamera_v1.NvCamTVal_type_get
    if _newclass:type = _swig_property(_nvcamera_v1.NvCamTVal_type_get, _nvcamera_v1.NvCamTVal_type_set)
    __swig_getmethods__["v"] = _nvcamera_v1.NvCamTVal_v_get
    if _newclass:v = _swig_property(_nvcamera_v1.NvCamTVal_v_get)
    def __getitem__(self, *args): return _nvcamera_v1.NvCamTVal___getitem__(self, *args)
    def __init__(self): 
        this = _nvcamera_v1.new_NvCamTVal()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvcamera_v1.delete_NvCamTVal
    __del__ = lambda self : None;
NvCamTVal_swigregister = _nvcamera_v1.NvCamTVal_swigregister
NvCamTVal_swigregister(NvCamTVal)

class NvCamTVal_v(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvCamTVal_v, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvCamTVal_v, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ival"] = _nvcamera_v1.NvCamTVal_v_ival_set
    __swig_getmethods__["ival"] = _nvcamera_v1.NvCamTVal_v_ival_get
    if _newclass:ival = _swig_property(_nvcamera_v1.NvCamTVal_v_ival_get, _nvcamera_v1.NvCamTVal_v_ival_set)
    __swig_setmethods__["fval"] = _nvcamera_v1.NvCamTVal_v_fval_set
    __swig_getmethods__["fval"] = _nvcamera_v1.NvCamTVal_v_fval_get
    if _newclass:fval = _swig_property(_nvcamera_v1.NvCamTVal_v_fval_get, _nvcamera_v1.NvCamTVal_v_fval_set)
    __swig_setmethods__["sval"] = _nvcamera_v1.NvCamTVal_v_sval_set
    __swig_getmethods__["sval"] = _nvcamera_v1.NvCamTVal_v_sval_get
    if _newclass:sval = _swig_property(_nvcamera_v1.NvCamTVal_v_sval_get, _nvcamera_v1.NvCamTVal_v_sval_set)
    __swig_getmethods__["err"] = _nvcamera_v1.NvCamTVal_v_err_get
    if _newclass:err = _swig_property(_nvcamera_v1.NvCamTVal_v_err_get)
    __swig_getmethods__["array"] = _nvcamera_v1.NvCamTVal_v_array_get
    if _newclass:array = _swig_property(_nvcamera_v1.NvCamTVal_v_array_get)
    def __init__(self): 
        this = _nvcamera_v1.new_NvCamTVal_v()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvcamera_v1.delete_NvCamTVal_v
    __del__ = lambda self : None;
NvCamTVal_v_swigregister = _nvcamera_v1.NvCamTVal_v_swigregister
NvCamTVal_v_swigregister(NvCamTVal_v)

class NvCamTVal_v_array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvCamTVal_v_array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvCamTVal_v_array, name)
    __repr__ = _swig_repr
    __swig_setmethods__["len"] = _nvcamera_v1.NvCamTVal_v_array_len_set
    __swig_getmethods__["len"] = _nvcamera_v1.NvCamTVal_v_array_len_get
    if _newclass:len = _swig_property(_nvcamera_v1.NvCamTVal_v_array_len_get, _nvcamera_v1.NvCamTVal_v_array_len_set)
    __swig_setmethods__["elts"] = _nvcamera_v1.NvCamTVal_v_array_elts_set
    __swig_getmethods__["elts"] = _nvcamera_v1.NvCamTVal_v_array_elts_get
    if _newclass:elts = _swig_property(_nvcamera_v1.NvCamTVal_v_array_elts_get, _nvcamera_v1.NvCamTVal_v_array_elts_set)
    def __init__(self): 
        this = _nvcamera_v1.new_NvCamTVal_v_array()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvcamera_v1.delete_NvCamTVal_v_array
    __del__ = lambda self : None;
NvCamTVal_v_array_swigregister = _nvcamera_v1.NvCamTVal_v_array_swigregister
NvCamTVal_v_array_swigregister(NvCamTVal_v_array)

class NvCamTVal_v_err(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvCamTVal_v_err, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvCamTVal_v_err, name)
    __repr__ = _swig_repr
    __swig_setmethods__["errval"] = _nvcamera_v1.NvCamTVal_v_err_errval_set
    __swig_getmethods__["errval"] = _nvcamera_v1.NvCamTVal_v_err_errval_get
    if _newclass:errval = _swig_property(_nvcamera_v1.NvCamTVal_v_err_errval_get, _nvcamera_v1.NvCamTVal_v_err_errval_set)
    __swig_setmethods__["msg"] = _nvcamera_v1.NvCamTVal_v_err_msg_set
    __swig_getmethods__["msg"] = _nvcamera_v1.NvCamTVal_v_err_msg_get
    if _newclass:msg = _swig_property(_nvcamera_v1.NvCamTVal_v_err_msg_get, _nvcamera_v1.NvCamTVal_v_err_msg_set)
    def __init__(self): 
        this = _nvcamera_v1.new_NvCamTVal_v_err()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvcamera_v1.delete_NvCamTVal_v_err
    __del__ = lambda self : None;
NvCamTVal_v_err_swigregister = _nvcamera_v1.NvCamTVal_v_err_swigregister
NvCamTVal_v_err_swigregister(NvCamTVal_v_err)

class NvTestRunCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvTestRunCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvTestRunCommand, name)
    __repr__ = _swig_repr
    __swig_setmethods__["compobj"] = _nvcamera_v1.NvTestRunCommand_compobj_set
    __swig_getmethods__["compobj"] = _nvcamera_v1.NvTestRunCommand_compobj_get
    if _newclass:compobj = _swig_property(_nvcamera_v1.NvTestRunCommand_compobj_get, _nvcamera_v1.NvTestRunCommand_compobj_set)
    __swig_setmethods__["attr"] = _nvcamera_v1.NvTestRunCommand_attr_set
    __swig_getmethods__["attr"] = _nvcamera_v1.NvTestRunCommand_attr_get
    if _newclass:attr = _swig_property(_nvcamera_v1.NvTestRunCommand_attr_get, _nvcamera_v1.NvTestRunCommand_attr_set)
    __swig_setmethods__["args"] = _nvcamera_v1.NvTestRunCommand_args_set
    __swig_getmethods__["args"] = _nvcamera_v1.NvTestRunCommand_args_get
    if _newclass:args = _swig_property(_nvcamera_v1.NvTestRunCommand_args_get, _nvcamera_v1.NvTestRunCommand_args_set)
    __swig_setmethods__["result"] = _nvcamera_v1.NvTestRunCommand_result_set
    __swig_getmethods__["result"] = _nvcamera_v1.NvTestRunCommand_result_get
    if _newclass:result = _swig_property(_nvcamera_v1.NvTestRunCommand_result_get, _nvcamera_v1.NvTestRunCommand_result_set)
    def __init__(self): 
        this = _nvcamera_v1.new_NvTestRunCommand()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvcamera_v1.delete_NvTestRunCommand
    __del__ = lambda self : None;
NvTestRunCommand_swigregister = _nvcamera_v1.NvTestRunCommand_swigregister
NvTestRunCommand_swigregister(NvTestRunCommand)


def new_NvCamTValArray(*args):
  return _nvcamera_v1.new_NvCamTValArray(*args)
new_NvCamTValArray = _nvcamera_v1.new_NvCamTValArray

def getArrayBuffer(*args):
  return _nvcamera_v1.getArrayBuffer(*args)
getArrayBuffer = _nvcamera_v1.getArrayBuffer

def NvCamTValArray_get(*args):
  return _nvcamera_v1.NvCamTValArray_get(*args)
NvCamTValArray_get = _nvcamera_v1.NvCamTValArray_get

def NvCamTValArray_set(*args):
  return _nvcamera_v1.NvCamTValArray_set(*args)
NvCamTValArray_set = _nvcamera_v1.NvCamTValArray_set

def delete_NvCamTValArray(*args):
  return _nvcamera_v1.delete_NvCamTValArray(*args)
delete_NvCamTValArray = _nvcamera_v1.delete_NvCamTValArray

def graph_open(*args):
  return _nvcamera_v1.graph_open(*args)
graph_open = _nvcamera_v1.graph_open

def graph_close(*args):
  return _nvcamera_v1.graph_close(*args)
graph_close = _nvcamera_v1.graph_close

def graph_preview(*args):
  return _nvcamera_v1.graph_preview(*args)
graph_preview = _nvcamera_v1.graph_preview

def graph_still(*args):
  return _nvcamera_v1.graph_still(*args)
graph_still = _nvcamera_v1.graph_still

def graph_video(*args):
  return _nvcamera_v1.graph_video(*args)
graph_video = _nvcamera_v1.graph_video

def graph_audio(*args):
  return _nvcamera_v1.graph_audio(*args)
graph_audio = _nvcamera_v1.graph_audio

def graph_set_imager(*args):
  return _nvcamera_v1.graph_set_imager(*args)
graph_set_imager = _nvcamera_v1.graph_set_imager
import array
import sys

# global variable to store graph metadata
_graphData = NvCamGraph()

class Graph:
    "nvcamera Graph class"
    global _graphData
    _oGraphImpl = None
    _operation = None

    def __init__(self):
        self._oGraphImpl = _GraphImpl()

    def setImager(self, *args):
        "Sets the camera imager/sensor GUID"
        return self._oGraphImpl.operation(_nvcamera_v1.cop_set_imager, *args)

    def preview(self, *args):
        "Add preview to the graph"
        return self._oGraphImpl.operation(_nvcamera_v1.cop_preview, *args)

    def run(self):
        "Run the graph"

        # HACK to disable early graph
        if (sys.platform.startswith("linux-arm")):
            print "disabling early graph"
            _disable_early_graph(1)

        return self._oGraphImpl.operation(_nvcamera_v1.cop_run)

    def still(self, *args):
        "Add still capture graph"
        return self._oGraphImpl.operation(_nvcamera_v1.cop_still, *args)

    def video(self, *args):
        "Add video capture graph"
        return self._oGraphImpl.operation(_nvcamera_v1.cop_video, *args)

    def stop(self):
        "Stop the graph"
        err = self._oGraphImpl.operation(_nvcamera_v1.cop_stop)

        # HACK to enable early graph
        if (sys.platform.startswith("linux-arm")):
            print "Enabling early graph"
            _disable_early_graph(0)

        return err

    def close(self):
        "Closes the graph"
        return self._oGraphImpl.operation(_nvcamera_v1.cop_close)


class Camera:
    "nvcamera Camera Class"
    global _graphData
    _oCameraImpl = None
    _operation = None

    def __init__(self):
        self._oCameraImpl = _CameraImpl()

    def startPreview(self, *args):
        "Start camera preview"
        return self._oCameraImpl.operation(_nvcamera_v1.cop_start, "preview", *args)

    def setAttr(self, attrID, *args):
        "Sets camera attribute"
        return self._oCameraImpl.operation(_nvcamera_v1.cop_setattr, attrID, *args)

    def getAttr(self, attrID):
        "Gets camera attribute"
        return self._oCameraImpl.operation(_nvcamera_v1.cop_getattr, attrID)

    def stopPreview(self):
        "Stops the camera preview"
        return self._oCameraImpl.operation(_nvcamera_v1.cop_stop, "preview")

    def setRawImage(self, header, pixelData, iteration):
        "Sets the raw image header and data"
        return self._oCameraImpl.operation(_nvcamera_v1.cop_set_raw_image, header, pixelData, iteration)

    def still(self, *args):
        "capture still image"
        return self._oCameraImpl.operation(_nvcamera_v1.cop_still, *args)

    def waitForEvent(self, *args):
        "wait for event(s)"
        return self._oCameraImpl.operation(_nvcamera_v1.cop_wait_event, *args)

    def halfpress(self, *args):
        "execute halfpress"
        return self._oCameraImpl.operation(_nvcamera_v1.cop_halfpress, *args)

    def hp_release(self):
        "releases half press"
        return self._oCameraImpl.operation(_nvcamera_v1.cop_hp_release)

    def startVideoRecording(self):
        "start video recording"
        return self._oCameraImpl.operation(_nvcamera_v1.cop_start_video)

    def stopVideoRecording(self):
        "stop video recording"
        return self._oCameraImpl.operation(_nvcamera_v1.cop_stop_video)

class _GraphImpl:
    "nvcamera Graph implementation class"
    objType = _nvcamera_v1.camobj_graph
    global _graphData

    def operation(self, op, *args):
        "Prepare for the graph operation and call the execution function"
        ret_val = None
        cmd = NvTestRunCommand()

        cmd.compobj = opcomp(self.objType, op)
        cmd.args.type = _nvcamera_v1.camtype_array
        cmd.args.v.array.len = len(args)

        cmd.args.v.array.elts = parse_arguments(args)
        ret_val = self.exec_operation(cmd)

        # free all dynamically allocated memory
        delete_NvCamTValArray(cmd.args)
        delete_NvCamTValArray(cmd.result)

        if ret_val != _nvcamera_v1.NvError_Success:
            raise NvCameraException(ret_val)

        return

    def exec_operation(self, cmd):
        "Execute graph function"
        err = 0
        if cmd.compobj == opcomp(_nvcamera_v1.camobj_graph, _nvcamera_v1.cop_close):
            _nvcamera_v1.graph_close(_graphData)
        elif cmd.compobj == opcomp(_nvcamera_v1.camobj_graph, _nvcamera_v1.cop_preview):
            err = _nvcamera_v1.graph_preview(cmd, _graphData)
        elif cmd.compobj == opcomp(_nvcamera_v1.camobj_graph, _nvcamera_v1.cop_still):
            err = _nvcamera_v1.graph_still(cmd, _graphData)
        elif cmd.compobj == opcomp(_nvcamera_v1.camobj_graph, _nvcamera_v1.cop_video):
            err = _nvcamera_v1.graph_video(cmd, _graphData)
        elif cmd.compobj == opcomp(_nvcamera_v1.camobj_graph, _nvcamera_v1.cop_audio):
            err = _nvcamera_v1.graph_audio(cmd, _graphData)
        elif cmd.compobj == opcomp(_nvcamera_v1.camobj_graph, _nvcamera_v1.cop_set_imager):
            err = _nvcamera_v1.graph_set_imager(cmd, _graphData)
        elif cmd.compobj == opcomp(_nvcamera_v1.camobj_graph, _nvcamera_v1.cop_run):
            err = _nvcamera_v1.graph_open(_graphData, _nvcamera_v1.GraphType_OMX)
            if err != _nvcamera_v1.NvError_Success:
                graph_close(_graphData)
            else:
                err = _graphData.run(_graphData, cmd)
        else:
            err = _graphData.run(_graphData, cmd)
        return err

class _CameraImpl:
    "nvcamera Camera implementation class"
    objType = _nvcamera_v1.camobj_camera
    global _graphData

    def operation(self, op, *args):
        "Prepare and execute the camera operation"

        cmd = NvTestRunCommand()
        arguments = None
        ret_val = None
        err = 0

        cmd.compobj = opcomp(self.objType, op)
        cmd.args.type = _nvcamera_v1.camtype_array

        if (op == _nvcamera_v1.cop_getattr or op == _nvcamera_v1.cop_setattr):
            cmd.args.v.array.len = len(args) - 1
            cmd.attr = args[0]
            arguments = args[1:]
        else:
            cmd.args.v.array.len = len(args)
            arguments = args

        cmd.args.v.array.elts = parse_arguments(arguments)
        err = _graphData.run(_graphData, cmd)

        if((_nvcamera_v1.NvSuccess == err) and (op == _nvcamera_v1.cop_getattr)):
            ret_val = parse_result_value(cmd.result)

        # free all dynamically allocated memory
        delete_NvCamTValArray(cmd.args)
        delete_NvCamTValArray(cmd.result)

        if _nvcamera_v1.NvError_Success != err:
            raise NvCameraException(err)

        return ret_val

class NvCameraException(Exception):
    """ this exception is raised when error occurs during
        graph/camera operations
    """

    def __init__(self, value):
        self.value = value

    def __str__(self):
        return "ErrorCode: %s: %s" % (repr(self.value), _nvcamera_v1.getErrorString(self.value))


def parse_arguments(args):
    argArray = None
    i = 0

    if 0 != len(args):
        argArray = new_NvCamTValArray(len(args))
    for arg in args:
        if(isinstance(arg, list) or isinstance(arg, tuple)):
            argArray[i].type = _nvcamera_v1.camtype_array
            argArray[i].v.array.elts = parse_arguments(arg)
            argArray[i].v.array.len = len(arg)
        elif(isinstance(arg, array.array)):
            argArray[i].type = _nvcamera_v1.camtype_array
            argArray[i].v.array.elts = getArrayBuffer(arg)
            argArray[i].v.array.len = 2
        else:
            assign_arg_value(argArray[i], arg)
        i = i + 1

    return argArray

def assign_arg_value(arg, value):
    if(isinstance(value, int)):
        arg.type = _nvcamera_v1.camtype_int
        arg.v.ival = value
    elif(isinstance(value, str)):
        arg.type = _nvcamera_v1.camtype_string
        arg.v.sval = value
    elif(isinstance(value, float)):
        arg.type = _nvcamera_v1.camtype_float
        arg.v.fval = value

def parse_result_value(ret_val):
    if(_nvcamera_v1.camtype_int == ret_val.type):
        return ret_val.v.ival
    elif(_nvcamera_v1.camtype_float == ret_val.type):
        return ret_val.v.fval
    elif(_nvcamera_v1.camtype_string == ret_val.type):
        return ret_val.v.sval
    elif(_nvcamera_v1.camtype_array == ret_val.type):
        retListVal = []
        for i in range(ret_val.v.array.len):
            retListVal.append(parse_result_value(ret_val.v.array.elts[i]))
        return retListVal

def _disable_early_graph(state):
    """disables early graph if it is not already disabled.
       This function assumes that if the nv-camera-disable-early-graph
       property is set to 1 that means that the functionality is
       disabled in mediaserver and hence it won't restart media server
       in that case
    """
    earlyGraphState = 0
    try:
        earlyGraphState = _execute_cmd(["getprop", "nv-camera-disable-early-graph"])
        if (earlyGraphState.strip() == ""):
            earlyGraphState = 0
    except RuntimeError, err:
        pass

    if (state == int(earlyGraphState)):
        return

    _execute_cmd(["setprop", "nv-camera-disable-early-graph", str(state)])
    _restart_media_server()

def _restart_media_server():
    import re
    task_info = _execute_cmd(['ps', 'mediaserver'])

    m = re.search('^\S+\s+(\d+)\s+',task_info,re.MULTILINE)

    if (m == None):
        return

    pid = m.group(1)
    print "restarting media server"
    try:
        _execute_cmd(['kill', pid])
    except RuntimeError, err:
       # HACK
       # ignore run time error while killing the media server
       # sometimes it seems to exit with 255 status code
       print "WARNING: %s" % str(err)

def _execute_cmd(args, silent = False):
    """Execute the command as a subprocess.

       Returns the exit code of the process on success
       Exit the script on failure
    """
    import subprocess

    sys.stdout.flush()

    # For Windows we need to use the shell so the path is searched (Python/Windows bug)
    # For Android, using the shell complicates things
    p = subprocess.Popen(args, shell=sys.platform.startswith('win'), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (std_out_str, std_err_str) = p.communicate()
    returncode = p.returncode

    clean_std_out_str = std_out_str.translate(None,'\r')
    clean_std_err_str = std_err_str.translate(None,'\r')

    if (returncode != 0):
        raise RuntimeError("Error (%d) executing command: %s" % (returncode, " ".join(args)))

    return clean_std_out_str

def opcomp(obj, op):
    return (((op) << 8) | (obj))

# This file is compatible with both classic and new-style classes.


