# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_nvcamera', [dirname(__file__)])
        except ImportError:
            import _nvcamera
            return _nvcamera
        if fp is not None:
            try:
                _mod = imp.load_module('_nvcamera', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _nvcamera = swig_import_helper()
    del swig_import_helper
else:
    import _nvcamera
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


# Copyright (c) 2013-2014, NVIDIA Corporation.  All rights reserved.
#
# NVIDIA Corporation and its licensors retain all intellectual property
# and proprietary rights in and to this software, related documentation
# and any modifications thereto.  Any use, reproduction, disclosure or
# distribution of this software and related documentation without an express
# license agreement from NVIDIA Corporation is strictly prohibited.
#

NV_FALSE = _nvcamera.NV_FALSE
NV_TRUE = _nvcamera.NV_TRUE
class NvSize(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvSize, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvSize, name)
    __repr__ = _swig_repr
    __swig_setmethods__["width"] = _nvcamera.NvSize_width_set
    __swig_getmethods__["width"] = _nvcamera.NvSize_width_get
    if _newclass:width = _swig_property(_nvcamera.NvSize_width_get, _nvcamera.NvSize_width_set)
    __swig_setmethods__["height"] = _nvcamera.NvSize_height_set
    __swig_getmethods__["height"] = _nvcamera.NvSize_height_get
    if _newclass:height = _swig_property(_nvcamera.NvSize_height_get, _nvcamera.NvSize_height_set)
    def __init__(self):
        this = _nvcamera.new_NvSize()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvcamera.delete_NvSize
    __del__ = lambda self : None;
NvSize_swigregister = _nvcamera.NvSize_swigregister
NvSize_swigregister(NvSize)

class PropertyData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PropertyData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PropertyData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["u8"] = _nvcamera.PropertyData_u8_set
    __swig_getmethods__["u8"] = _nvcamera.PropertyData_u8_get
    if _newclass:u8 = _swig_property(_nvcamera.PropertyData_u8_get, _nvcamera.PropertyData_u8_set)
    __swig_setmethods__["u32"] = _nvcamera.PropertyData_u32_set
    __swig_getmethods__["u32"] = _nvcamera.PropertyData_u32_get
    if _newclass:u32 = _swig_property(_nvcamera.PropertyData_u32_get, _nvcamera.PropertyData_u32_set)
    __swig_setmethods__["i32"] = _nvcamera.PropertyData_i32_set
    __swig_getmethods__["i32"] = _nvcamera.PropertyData_i32_get
    if _newclass:i32 = _swig_property(_nvcamera.PropertyData_i32_get, _nvcamera.PropertyData_i32_set)
    __swig_setmethods__["f"] = _nvcamera.PropertyData_f_set
    __swig_getmethods__["f"] = _nvcamera.PropertyData_f_get
    if _newclass:f = _swig_property(_nvcamera.PropertyData_f_get, _nvcamera.PropertyData_f_set)
    __swig_setmethods__["u64"] = _nvcamera.PropertyData_u64_set
    __swig_getmethods__["u64"] = _nvcamera.PropertyData_u64_get
    if _newclass:u64 = _swig_property(_nvcamera.PropertyData_u64_get, _nvcamera.PropertyData_u64_set)
    __swig_setmethods__["d"] = _nvcamera.PropertyData_d_set
    __swig_getmethods__["d"] = _nvcamera.PropertyData_d_get
    if _newclass:d = _swig_property(_nvcamera.PropertyData_d_get, _nvcamera.PropertyData_d_set)
    def __init__(self):
        this = _nvcamera.new_PropertyData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvcamera.delete_PropertyData
    __del__ = lambda self : None;
PropertyData_swigregister = _nvcamera.PropertyData_swigregister
PropertyData_swigregister(PropertyData)

class NvMMCameraSensorMode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvMMCameraSensorMode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvMMCameraSensorMode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Resolution"] = _nvcamera.NvMMCameraSensorMode_Resolution_set
    __swig_getmethods__["Resolution"] = _nvcamera.NvMMCameraSensorMode_Resolution_get
    if _newclass:Resolution = _swig_property(_nvcamera.NvMMCameraSensorMode_Resolution_get, _nvcamera.NvMMCameraSensorMode_Resolution_set)
    __swig_setmethods__["FrameRate"] = _nvcamera.NvMMCameraSensorMode_FrameRate_set
    __swig_getmethods__["FrameRate"] = _nvcamera.NvMMCameraSensorMode_FrameRate_get
    if _newclass:FrameRate = _swig_property(_nvcamera.NvMMCameraSensorMode_FrameRate_get, _nvcamera.NvMMCameraSensorMode_FrameRate_set)
    def __init__(self):
        this = _nvcamera.new_NvMMCameraSensorMode()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvcamera.delete_NvMMCameraSensorMode
    __del__ = lambda self : None;
NvMMCameraSensorMode_swigregister = _nvcamera.NvMMCameraSensorMode_swigregister
NvMMCameraSensorMode_swigregister(NvMMCameraSensorMode)

NvCameraCoreUseCase_Preview = _nvcamera.NvCameraCoreUseCase_Preview
NvCameraCoreUseCase_Still = _nvcamera.NvCameraCoreUseCase_Still
NvCameraCoreUseCase_Video = _nvcamera.NvCameraCoreUseCase_Video
NvCameraCoreUseCase_VideoSnapshot = _nvcamera.NvCameraCoreUseCase_VideoSnapshot
NvCameraCoreUseCase_ZSL = _nvcamera.NvCameraCoreUseCase_ZSL
NvCameraCoreUseCase_Force32 = _nvcamera.NvCameraCoreUseCase_Force32
NvError_Success = _nvcamera.NvError_Success
NvError_NotImplemented = _nvcamera.NvError_NotImplemented
NvError_NotSupported = _nvcamera.NvError_NotSupported
NvError_NotInitialized = _nvcamera.NvError_NotInitialized
NvError_BadParameter = _nvcamera.NvError_BadParameter
NvError_Timeout = _nvcamera.NvError_Timeout
NvError_InsufficientMemory = _nvcamera.NvError_InsufficientMemory
NvError_ReadOnlyAttribute = _nvcamera.NvError_ReadOnlyAttribute
NvError_InvalidState = _nvcamera.NvError_InvalidState
NvError_InvalidAddress = _nvcamera.NvError_InvalidAddress
NvError_InvalidSize = _nvcamera.NvError_InvalidSize
NvError_BadValue = _nvcamera.NvError_BadValue
NvError_AlreadyAllocated = _nvcamera.NvError_AlreadyAllocated
NvError_Busy = _nvcamera.NvError_Busy
NvError_ModuleNotPresent = _nvcamera.NvError_ModuleNotPresent
NvError_ResourceError = _nvcamera.NvError_ResourceError
NvError_CountMismatch = _nvcamera.NvError_CountMismatch
NvError_InsufficientVideoMemory = _nvcamera.NvError_InsufficientVideoMemory
NvError_BadSurfaceColorScheme = _nvcamera.NvError_BadSurfaceColorScheme
NvError_InvalidSurface = _nvcamera.NvError_InvalidSurface
NvError_SurfaceNotSupported = _nvcamera.NvError_SurfaceNotSupported
NvError_DispInitFailed = _nvcamera.NvError_DispInitFailed
NvError_DispAlreadyAttached = _nvcamera.NvError_DispAlreadyAttached
NvError_DispTooManyDisplays = _nvcamera.NvError_DispTooManyDisplays
NvError_DispNoDisplaysAttached = _nvcamera.NvError_DispNoDisplaysAttached
NvError_DispModeNotSupported = _nvcamera.NvError_DispModeNotSupported
NvError_DispNotFound = _nvcamera.NvError_DispNotFound
NvError_DispAttachDissallowed = _nvcamera.NvError_DispAttachDissallowed
NvError_DispTypeNotSupported = _nvcamera.NvError_DispTypeNotSupported
NvError_DispAuthenticationFailed = _nvcamera.NvError_DispAuthenticationFailed
NvError_DispNotAttached = _nvcamera.NvError_DispNotAttached
NvError_DispSamePwrState = _nvcamera.NvError_DispSamePwrState
NvError_DispEdidFailure = _nvcamera.NvError_DispEdidFailure
NvError_DispDsiReadAckError = _nvcamera.NvError_DispDsiReadAckError
NvError_DispDsiReadInvalidResp = _nvcamera.NvError_DispDsiReadInvalidResp
NvError_FileWriteFailed = _nvcamera.NvError_FileWriteFailed
NvError_FileReadFailed = _nvcamera.NvError_FileReadFailed
NvError_EndOfFile = _nvcamera.NvError_EndOfFile
NvError_FileOperationFailed = _nvcamera.NvError_FileOperationFailed
NvError_DirOperationFailed = _nvcamera.NvError_DirOperationFailed
NvError_EndOfDirList = _nvcamera.NvError_EndOfDirList
NvError_ConfigVarNotFound = _nvcamera.NvError_ConfigVarNotFound
NvError_InvalidConfigVar = _nvcamera.NvError_InvalidConfigVar
NvError_LibraryNotFound = _nvcamera.NvError_LibraryNotFound
NvError_SymbolNotFound = _nvcamera.NvError_SymbolNotFound
NvError_MemoryMapFailed = _nvcamera.NvError_MemoryMapFailed
NvError_IoctlFailed = _nvcamera.NvError_IoctlFailed
NvError_AccessDenied = _nvcamera.NvError_AccessDenied
NvError_DeviceNotFound = _nvcamera.NvError_DeviceNotFound
NvError_KernelDriverNotFound = _nvcamera.NvError_KernelDriverNotFound
NvError_FileNotFound = _nvcamera.NvError_FileNotFound
NvError_SpiReceiveError = _nvcamera.NvError_SpiReceiveError
NvError_SpiTransmitError = _nvcamera.NvError_SpiTransmitError
NvError_HsmmcCardNotPresent = _nvcamera.NvError_HsmmcCardNotPresent
NvError_HsmmcControllerBusy = _nvcamera.NvError_HsmmcControllerBusy
NvError_HsmmcAutoDetectCard = _nvcamera.NvError_HsmmcAutoDetectCard
NvError_SdioCardNotPresent = _nvcamera.NvError_SdioCardNotPresent
NvError_SdioInstanceTaken = _nvcamera.NvError_SdioInstanceTaken
NvError_SdioControllerBusy = _nvcamera.NvError_SdioControllerBusy
NvError_SdioReadFailed = _nvcamera.NvError_SdioReadFailed
NvError_SdioWriteFailed = _nvcamera.NvError_SdioWriteFailed
NvError_SdioBadBlockSize = _nvcamera.NvError_SdioBadBlockSize
NvError_SdioClockNotConfigured = _nvcamera.NvError_SdioClockNotConfigured
NvError_SdioSdhcPatternIntegrityFailed = _nvcamera.NvError_SdioSdhcPatternIntegrityFailed
NvError_SdioCommandFailed = _nvcamera.NvError_SdioCommandFailed
NvError_SdioCardAlwaysPresent = _nvcamera.NvError_SdioCardAlwaysPresent
NvError_SdioAutoDetectCard = _nvcamera.NvError_SdioAutoDetectCard
NvError_UsbInvalidEndpoint = _nvcamera.NvError_UsbInvalidEndpoint
NvError_UsbfTxfrActive = _nvcamera.NvError_UsbfTxfrActive
NvError_UsbfTxfrComplete = _nvcamera.NvError_UsbfTxfrComplete
NvError_UsbfTxfrFail = _nvcamera.NvError_UsbfTxfrFail
NvError_UsbfEpStalled = _nvcamera.NvError_UsbfEpStalled
NvError_UsbfCableDisConnected = _nvcamera.NvError_UsbfCableDisConnected
NvError_UartOverrun = _nvcamera.NvError_UartOverrun
NvError_UartFraming = _nvcamera.NvError_UartFraming
NvError_UartParity = _nvcamera.NvError_UartParity
NvError_UartBreakReceived = _nvcamera.NvError_UartBreakReceived
NvError_I2cReadFailed = _nvcamera.NvError_I2cReadFailed
NvError_I2cWriteFailed = _nvcamera.NvError_I2cWriteFailed
NvError_I2cDeviceNotFound = _nvcamera.NvError_I2cDeviceNotFound
NvError_I2cInternalError = _nvcamera.NvError_I2cInternalError
NvError_I2cArbitrationFailed = _nvcamera.NvError_I2cArbitrationFailed
NvError_IdeHwError = _nvcamera.NvError_IdeHwError
NvError_IdeReadError = _nvcamera.NvError_IdeReadError
NvError_IdeWriteError = _nvcamera.NvError_IdeWriteError
NvError_OwrReadFailed = _nvcamera.NvError_OwrReadFailed
NvError_OwrWriteFailed = _nvcamera.NvError_OwrWriteFailed
NvError_OwrBitTransferFailed = _nvcamera.NvError_OwrBitTransferFailed
NvError_OwrInvalidOffset = _nvcamera.NvError_OwrInvalidOffset
NvError_InvalidOperation = _nvcamera.NvError_InvalidOperation
NvError_RmInitFailed = _nvcamera.NvError_RmInitFailed
NvError_RmChannelInitFailure = _nvcamera.NvError_RmChannelInitFailure
NvError_RmStreamInitFailure = _nvcamera.NvError_RmStreamInitFailure
NvError_RmSyncPointAllocFailure = _nvcamera.NvError_RmSyncPointAllocFailure
NvError_ResourceAlreadyInUse = _nvcamera.NvError_ResourceAlreadyInUse
NvError_DmaBusy = _nvcamera.NvError_DmaBusy
NvError_InvalidSourceId = _nvcamera.NvError_InvalidSourceId
NvError_DmaChannelNotAvailable = _nvcamera.NvError_DmaChannelNotAvailable
NvError_NoConnectedImager = _nvcamera.NvError_NoConnectedImager
NvError_UnsupportedResolution = _nvcamera.NvError_UnsupportedResolution
NvError_I2CCommunicationError = _nvcamera.NvError_I2CCommunicationError
NvError_IspConfigFileParseError = _nvcamera.NvError_IspConfigFileParseError
NvError_TooDark = _nvcamera.NvError_TooDark
NvError_InvalidIspConfigAttribute = _nvcamera.NvError_InvalidIspConfigAttribute
NvError_InvalidIspConfigAttributeElement = _nvcamera.NvError_InvalidIspConfigAttributeElement
NvError_IspConfigSyntaxError = _nvcamera.NvError_IspConfigSyntaxError
NvError_ImagerVersionNotSupported = _nvcamera.NvError_ImagerVersionNotSupported
NvError_CorruptedBuffer = _nvcamera.NvError_CorruptedBuffer
NvError_UnderConfident = _nvcamera.NvError_UnderConfident
NvError_TestApplicationFailed = _nvcamera.NvError_TestApplicationFailed
NvError_TestNoUserInput = _nvcamera.NvError_TestNoUserInput
NvError_TestCommandLineError = _nvcamera.NvError_TestCommandLineError
NvError_TestDataVerificationFailed = _nvcamera.NvError_TestDataVerificationFailed
NvError_TestServerFileReadFailed = _nvcamera.NvError_TestServerFileReadFailed
NvError_TestServerInvalidAddress = _nvcamera.NvError_TestServerInvalidAddress
NvError_TestServerMemoryLimitExceeded = _nvcamera.NvError_TestServerMemoryLimitExceeded
NvError_ColorFormatNotSupported = _nvcamera.NvError_ColorFormatNotSupported
NvError_TransportPortAlreadyExist = _nvcamera.NvError_TransportPortAlreadyExist
NvError_TransportMessageBoxEmpty = _nvcamera.NvError_TransportMessageBoxEmpty
NvError_TransportMessageBoxFull = _nvcamera.NvError_TransportMessageBoxFull
NvError_TransportConnectionFailed = _nvcamera.NvError_TransportConnectionFailed
NvError_TransportNotConnected = _nvcamera.NvError_TransportNotConnected
NvError_NandReadFailed = _nvcamera.NvError_NandReadFailed
NvError_NandProgramFailed = _nvcamera.NvError_NandProgramFailed
NvError_NandEraseFailed = _nvcamera.NvError_NandEraseFailed
NvError_NandCopyBackFailed = _nvcamera.NvError_NandCopyBackFailed
NvError_NandOperationFailed = _nvcamera.NvError_NandOperationFailed
NvError_NandBusy = _nvcamera.NvError_NandBusy
NvError_NandNotOpened = _nvcamera.NvError_NandNotOpened
NvError_NandAlreadyOpened = _nvcamera.NvError_NandAlreadyOpened
NvError_NandBadOperationRequest = _nvcamera.NvError_NandBadOperationRequest
NvError_NandCommandQueueError = _nvcamera.NvError_NandCommandQueueError
NvError_NandReadEccFailed = _nvcamera.NvError_NandReadEccFailed
NvError_NandFlashNotSupported = _nvcamera.NvError_NandFlashNotSupported
NvError_NandLockFailed = _nvcamera.NvError_NandLockFailed
NvError_NandErrorThresholdReached = _nvcamera.NvError_NandErrorThresholdReached
NvError_NandWriteFailed = _nvcamera.NvError_NandWriteFailed
NvError_NandBadBlock = _nvcamera.NvError_NandBadBlock
NvError_NandBadState = _nvcamera.NvError_NandBadState
NvError_NandBlockIsLocked = _nvcamera.NvError_NandBlockIsLocked
NvError_NandNoFreeBlock = _nvcamera.NvError_NandNoFreeBlock
NvError_NandTTFailed = _nvcamera.NvError_NandTTFailed
NvError_NandTLFailed = _nvcamera.NvError_NandTLFailed
NvError_NandTLNoBlockAssigned = _nvcamera.NvError_NandTLNoBlockAssigned
NvError_WinSysBadDisplay = _nvcamera.NvError_WinSysBadDisplay
NvError_WinSysNoDevice = _nvcamera.NvError_WinSysNoDevice
NvError_WinSysBadDrawable = _nvcamera.NvError_WinSysBadDrawable
NvError_BLServerFileReadFailed = _nvcamera.NvError_BLServerFileReadFailed
NvError_BLServerInvalidAddress = _nvcamera.NvError_BLServerInvalidAddress
NvError_BLServerInvalidElfFile = _nvcamera.NvError_BLServerInvalidElfFile
NvError_BLServerConnectionFailed = _nvcamera.NvError_BLServerConnectionFailed
NvError_BLServerMemoryLimitExceeded = _nvcamera.NvError_BLServerMemoryLimitExceeded
NvError_AudioMixerPinTypeNotSupported = _nvcamera.NvError_AudioMixerPinTypeNotSupported
NvError_AudioMixerDirectionNotSupported = _nvcamera.NvError_AudioMixerDirectionNotSupported
NvError_AudioMixerNoMorePinsAvailable = _nvcamera.NvError_AudioMixerNoMorePinsAvailable
NvError_AudioMixerBadPinNumber = _nvcamera.NvError_AudioMixerBadPinNumber
NvError_VideoEncResolutionNotSupported = _nvcamera.NvError_VideoEncResolutionNotSupported
NvError_JPEGEncHWError = _nvcamera.NvError_JPEGEncHWError
NvError_VideoDecRetainLock = _nvcamera.NvError_VideoDecRetainLock
NvError_VideoDecMataDataFound = _nvcamera.NvError_VideoDecMataDataFound
NvError_VideoDecFrameDecoded = _nvcamera.NvError_VideoDecFrameDecoded
NvError_VideoDecDecodedPartialFrame = _nvcamera.NvError_VideoDecDecodedPartialFrame
NvError_VideoDecInsufficientBitstream = _nvcamera.NvError_VideoDecInsufficientBitstream
NvError_VideoDecOutputSurfaceUnavailable = _nvcamera.NvError_VideoDecOutputSurfaceUnavailable
NvError_VideoDecUnsupportedStreamFormat = _nvcamera.NvError_VideoDecUnsupportedStreamFormat
NvError_VideoDecFrameDecodedPlusVideoDecEvent = _nvcamera.NvError_VideoDecFrameDecodedPlusVideoDecEvent
NvError_VideoDecFailed = _nvcamera.NvError_VideoDecFailed
NvError_VideoDecDecodingComplete = _nvcamera.NvError_VideoDecDecodingComplete
NvError_VideoDecProvideNextIPBuffer = _nvcamera.NvError_VideoDecProvideNextIPBuffer
NvError_VideoDecProvideCurrentIPBuffer = _nvcamera.NvError_VideoDecProvideCurrentIPBuffer
NvError_VideoDecBypassMoreWork = _nvcamera.NvError_VideoDecBypassMoreWork
NvError_PipeNotConnected = _nvcamera.NvError_PipeNotConnected
NvError_ReadQNotCreated = _nvcamera.NvError_ReadQNotCreated
NvError_ParserEndOfStream = _nvcamera.NvError_ParserEndOfStream
NvError_ParserFailedToGetData = _nvcamera.NvError_ParserFailedToGetData
NvError_InSufficientBufferSize = _nvcamera.NvError_InSufficientBufferSize
NvError_ParserReadFailure = _nvcamera.NvError_ParserReadFailure
NvError_ParserOpenFailure = _nvcamera.NvError_ParserOpenFailure
NvError_UnSupportedStream = _nvcamera.NvError_UnSupportedStream
NvError_ParserFailure = _nvcamera.NvError_ParserFailure
NvError_ParserHeaderDecodeNotComplete = _nvcamera.NvError_ParserHeaderDecodeNotComplete
NvError_ParserCloseFailure = _nvcamera.NvError_ParserCloseFailure
NvError_ParserMarkerHit = _nvcamera.NvError_ParserMarkerHit
NvError_ParserCorruptedStream = _nvcamera.NvError_ParserCorruptedStream
NvError_ParserDRMLicenseNotFound = _nvcamera.NvError_ParserDRMLicenseNotFound
NvError_ParserDRMFailure = _nvcamera.NvError_ParserDRMFailure
NvError_ParserSeekUnSupported = _nvcamera.NvError_ParserSeekUnSupported
NvError_ParserTrickModeUnSupported = _nvcamera.NvError_ParserTrickModeUnSupported
NvError_ParserCoreNotCreated = _nvcamera.NvError_ParserCoreNotCreated
NvError_UnSupported_VideoStream = _nvcamera.NvError_UnSupported_VideoStream
NvError_UnSupported_AudioStream = _nvcamera.NvError_UnSupported_AudioStream
NvError_ParserTruncatedFile = _nvcamera.NvError_ParserTruncatedFile
NvError_ParserOffsetsNotFound = _nvcamera.NvError_ParserOffsetsNotFound
NvError_WriterOpenFailure = _nvcamera.NvError_WriterOpenFailure
NvError_WriterUnsupportedStream = _nvcamera.NvError_WriterUnsupportedStream
NvError_WriterUnsupportedUserData = _nvcamera.NvError_WriterUnsupportedUserData
NvError_WriterFileSizeLimitExceeded = _nvcamera.NvError_WriterFileSizeLimitExceeded
NvError_WriterInsufficientMemory = _nvcamera.NvError_WriterInsufficientMemory
NvError_WriterFailure = _nvcamera.NvError_WriterFailure
NvError_WriterCloseFailure = _nvcamera.NvError_WriterCloseFailure
NvError_WriterInitFailure = _nvcamera.NvError_WriterInitFailure
NvError_WriterFileWriteLimitExceeded = _nvcamera.NvError_WriterFileWriteLimitExceeded
NvError_WriterTimeLimitExceeded = _nvcamera.NvError_WriterTimeLimitExceeded
NvError_ContentPipeNoData = _nvcamera.NvError_ContentPipeNoData
NvError_ContentPipeNoFreeBuffers = _nvcamera.NvError_ContentPipeNoFreeBuffers
NvError_ContentPipeSpareAreaInUse = _nvcamera.NvError_ContentPipeSpareAreaInUse
NvError_ContentPipeEndOfStream = _nvcamera.NvError_ContentPipeEndOfStream
NvError_ContentPipeNotReady = _nvcamera.NvError_ContentPipeNotReady
NvError_ContentPipeInNonCachingMode = _nvcamera.NvError_ContentPipeInNonCachingMode
NvError_ContentPipeInsufficientMemory = _nvcamera.NvError_ContentPipeInsufficientMemory
NvError_ContentPipeNotInvalidated = _nvcamera.NvError_ContentPipeNotInvalidated
NvError_UnSupportedMetadata = _nvcamera.NvError_UnSupportedMetadata
NvError_MetadataSuccess = _nvcamera.NvError_MetadataSuccess
NvError_MetadataFailure = _nvcamera.NvError_MetadataFailure
NvError_NewMetaDataAvailable = _nvcamera.NvError_NewMetaDataAvailable
NvError_RefURLAvailable = _nvcamera.NvError_RefURLAvailable
NvError_TrackListInvalidTrackIndex = _nvcamera.NvError_TrackListInvalidTrackIndex
NvError_TrackListError = _nvcamera.NvError_TrackListError
NvError_TrackListItemStillPlayingError = _nvcamera.NvError_TrackListItemStillPlayingError
NvError_TrackListNotPlaying = _nvcamera.NvError_TrackListNotPlaying
NvError_Nv3pUnrecoverableProtocol = _nvcamera.NvError_Nv3pUnrecoverableProtocol
NvError_Nv3pBadPacketType = _nvcamera.NvError_Nv3pBadPacketType
NvError_Nv3pPacketNacked = _nvcamera.NvError_Nv3pPacketNacked
NvError_Nv3pBadReceiveLength = _nvcamera.NvError_Nv3pBadReceiveLength
NvError_Nv3pBadReturnData = _nvcamera.NvError_Nv3pBadReturnData
NvError_AesClearSbkFailed = _nvcamera.NvError_AesClearSbkFailed
NvError_AesLockSskFailed = _nvcamera.NvError_AesLockSskFailed
NvError_AesDisableCryptoFailed = _nvcamera.NvError_AesDisableCryptoFailed
NvError_AesKeyUnWrapFailed = _nvcamera.NvError_AesKeyUnWrapFailed
NvError_AesPermissionDenied = _nvcamera.NvError_AesPermissionDenied
NvError_BlockDriverIllegalIoctl = _nvcamera.NvError_BlockDriverIllegalIoctl
NvError_BlockDriverOverlappedPartition = _nvcamera.NvError_BlockDriverOverlappedPartition
NvError_BlockDriverNoPartition = _nvcamera.NvError_BlockDriverNoPartition
NvError_BlockDriverIllegalPartId = _nvcamera.NvError_BlockDriverIllegalPartId
NvError_BlockDriverWriteVerifyFailed = _nvcamera.NvError_BlockDriverWriteVerifyFailed
NvError_NandBlockDriverEraseFailure = _nvcamera.NvError_NandBlockDriverEraseFailure
NvError_NandBlockDriverWriteFailure = _nvcamera.NvError_NandBlockDriverWriteFailure
NvError_NandBlockDriverReadFailure = _nvcamera.NvError_NandBlockDriverReadFailure
NvError_NandBlockDriverLockFailure = _nvcamera.NvError_NandBlockDriverLockFailure
NvError_NandRegionIllegalAddress = _nvcamera.NvError_NandRegionIllegalAddress
NvError_NandRegionTableOpFailure = _nvcamera.NvError_NandRegionTableOpFailure
NvError_NandBlockDriverMultiInterleave = _nvcamera.NvError_NandBlockDriverMultiInterleave
NvError_NandTagAreaSearchFailure = _nvcamera.NvError_NandTagAreaSearchFailure
NvError_EmmcBlockDriverLockNotSupported = _nvcamera.NvError_EmmcBlockDriverLockNotSupported
NvError_EmmcBlockDriverLockUnaligned = _nvcamera.NvError_EmmcBlockDriverLockUnaligned
NvError_EmmcBlockDriverIllegalStateRead = _nvcamera.NvError_EmmcBlockDriverIllegalStateRead
NvError_EmmcBlockDriverIllegalStateWrite = _nvcamera.NvError_EmmcBlockDriverIllegalStateWrite
NvError_EmmcCommandFailed = _nvcamera.NvError_EmmcCommandFailed
NvError_EmmcReadFailed = _nvcamera.NvError_EmmcReadFailed
NvError_EmmcWriteFailed = _nvcamera.NvError_EmmcWriteFailed
NvError_EmmcBlockDriverEraseFailure = _nvcamera.NvError_EmmcBlockDriverEraseFailure
NvError_EmmcBlockDriverIllegalAddress = _nvcamera.NvError_EmmcBlockDriverIllegalAddress
NvError_EmmcBlockDriverLockFailure = _nvcamera.NvError_EmmcBlockDriverLockFailure
NvError_EmmcBlockDriverBlockIsLocked = _nvcamera.NvError_EmmcBlockDriverBlockIsLocked
NvError_MipiHsiTxFifoEmpty = _nvcamera.NvError_MipiHsiTxFifoEmpty
NvError_MipiHsiRxFifoEmpty = _nvcamera.NvError_MipiHsiRxFifoEmpty
NvError_MipiHsiBusy = _nvcamera.NvError_MipiHsiBusy
NvError_MipiHsiHandleNotConfigured = _nvcamera.NvError_MipiHsiHandleNotConfigured
NvError_MipiHsiTransmitError = _nvcamera.NvError_MipiHsiTransmitError
NvError_MipiHsiReceiveError = _nvcamera.NvError_MipiHsiReceiveError
NvError_MipiHsiTransferIncomplete = _nvcamera.NvError_MipiHsiTransferIncomplete
NvError_SCCompileFail = _nvcamera.NvError_SCCompileFail
NvError_DrmFailure = _nvcamera.NvError_DrmFailure
NvError_DrmInvalidArg = _nvcamera.NvError_DrmInvalidArg
NvError_DrmOutOfMemory = _nvcamera.NvError_DrmOutOfMemory
NvError_DrmFileNotFound = _nvcamera.NvError_DrmFileNotFound
NvError_DrmBufferTooSmall = _nvcamera.NvError_DrmBufferTooSmall
NvError_DrmInvalidLicense = _nvcamera.NvError_DrmInvalidLicense
NvError_DrmLicenseExpired = _nvcamera.NvError_DrmLicenseExpired
NvError_DrmRightsNotAvailable = _nvcamera.NvError_DrmRightsNotAvailable
NvError_DrmLicenseNotFound = _nvcamera.NvError_DrmLicenseNotFound
NvError_DrmInvalidBindId = _nvcamera.NvError_DrmInvalidBindId
NvError_DrmVersionNotSupported = _nvcamera.NvError_DrmVersionNotSupported
NvError_DrmMeteringNotSupported = _nvcamera.NvError_DrmMeteringNotSupported
NvError_DrmDecryptionFailed = _nvcamera.NvError_DrmDecryptionFailed
NvError_SysUpdateInvalidBLVersion = _nvcamera.NvError_SysUpdateInvalidBLVersion
NvError_SysUpdateInvalidChecksum = _nvcamera.NvError_SysUpdateInvalidChecksum
NvError_SysUpdateBLUpdateNotAllowed = _nvcamera.NvError_SysUpdateBLUpdateNotAllowed
NvSuccess = _nvcamera.NvSuccess
NvError_Force32 = _nvcamera.NvError_Force32

def getErrorString(*args):
  return _nvcamera.getErrorString(*args)
getErrorString = _nvcamera.getErrorString
PROP_TYPE_NULL = _nvcamera.PROP_TYPE_NULL
PROP_TYPE_BOOL = _nvcamera.PROP_TYPE_BOOL
PROP_TYPE_UINT8 = _nvcamera.PROP_TYPE_UINT8
PROP_TYPE_UINT32 = _nvcamera.PROP_TYPE_UINT32
PROP_TYPE_SINT32 = _nvcamera.PROP_TYPE_SINT32
PROP_TYPE_UINT64 = _nvcamera.PROP_TYPE_UINT64
PROP_TYPE_FLOAT = _nvcamera.PROP_TYPE_FLOAT
PROP_NONE = _nvcamera.PROP_NONE
PROP_SPECIAL_EFFECT = _nvcamera.PROP_SPECIAL_EFFECT
PROP_EXPOSURE_TIME = _nvcamera.PROP_EXPOSURE_TIME
PROP_SENSOR_SENSITIVITY = _nvcamera.PROP_SENSOR_SENSITIVITY
PROP_NOISE_REDUCTION_MODE = _nvcamera.PROP_NOISE_REDUCTION_MODE
PROP_AWB_MODE = _nvcamera.PROP_AWB_MODE
PROP_AWB_LOCK = _nvcamera.PROP_AWB_LOCK
PROP_AE_MODE = _nvcamera.PROP_AE_MODE
PROP_AE_LOCK = _nvcamera.PROP_AE_LOCK
PROP_AE_STATE = _nvcamera.PROP_AE_STATE
PROP_AF_MODE = _nvcamera.PROP_AF_MODE
PROP_AF_TRIGGER = _nvcamera.PROP_AF_TRIGGER
PROP_AF_STATE = _nvcamera.PROP_AF_STATE
PROP_EXPOSURE_TIMERANGE = _nvcamera.PROP_EXPOSURE_TIMERANGE
PROP_FRAME_RATE = _nvcamera.PROP_FRAME_RATE
PROP_PAUSE_AFTER_CAPTURE = _nvcamera.PROP_PAUSE_AFTER_CAPTURE
PROP_AUTOFOCUS = _nvcamera.PROP_AUTOFOCUS
PROP_CONTINUOUS_AUTOFOCUS = _nvcamera.PROP_CONTINUOUS_AUTOFOCUS
PROP_AUTOEXPOSURE = _nvcamera.PROP_AUTOEXPOSURE
PROP_AUTOWHITEBALANCE = _nvcamera.PROP_AUTOWHITEBALANCE
PROP_AWB_STATE = _nvcamera.PROP_AWB_STATE
PROP_FOCUS_DISTANCE = _nvcamera.PROP_FOCUS_DISTANCE
PROP_FOCUS_POS = _nvcamera.PROP_FOCUS_POS
PROP_CONCURRENT_RAW_DUMP_FLAG = _nvcamera.PROP_CONCURRENT_RAW_DUMP_FLAG
PROP_FOCUSINFO_PHYSRANGE = _nvcamera.PROP_FOCUSINFO_PHYSRANGE
PROP_FOCUSINFO_INF = _nvcamera.PROP_FOCUSINFO_INF
PROP_FOCUSINFO_INF_OFFSET = _nvcamera.PROP_FOCUSINFO_INF_OFFSET
PROP_FOCUSINFO_MACRO = _nvcamera.PROP_FOCUSINFO_MACRO
PROP_FOCUSINFO_MACRO_OFFSET = _nvcamera.PROP_FOCUSINFO_MACRO_OFFSET
PROP_CROP_REGION = _nvcamera.PROP_CROP_REGION
PROP_GAIN_RANGE = _nvcamera.PROP_GAIN_RANGE
PROP_FUSE_ID = _nvcamera.PROP_FUSE_ID
PROP_AOHDR_MODE = _nvcamera.PROP_AOHDR_MODE
PROP_WB_MANUAL_MODE = _nvcamera.PROP_WB_MANUAL_MODE
PROP_WB_GAINS = _nvcamera.PROP_WB_GAINS
PROP_SENSOR_ANALOG_GAIN = _nvcamera.PROP_SENSOR_ANALOG_GAIN
NUM_PROPERTIES = _nvcamera.NUM_PROPERTIES
class CamProperty(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CamProperty, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CamProperty, name)
    __repr__ = _swig_repr
    def __init__(self, *args):
        this = _nvcamera.new_CamProperty(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["id"] = _nvcamera.CamProperty_id_set
    __swig_getmethods__["id"] = _nvcamera.CamProperty_id_get
    if _newclass:id = _swig_property(_nvcamera.CamProperty_id_get, _nvcamera.CamProperty_id_set)
    __swig_setmethods__["type"] = _nvcamera.CamProperty_type_set
    __swig_getmethods__["type"] = _nvcamera.CamProperty_type_get
    if _newclass:type = _swig_property(_nvcamera.CamProperty_type_get, _nvcamera.CamProperty_type_set)
    __swig_setmethods__["count"] = _nvcamera.CamProperty_count_set
    __swig_getmethods__["count"] = _nvcamera.CamProperty_count_get
    if _newclass:count = _swig_property(_nvcamera.CamProperty_count_get, _nvcamera.CamProperty_count_set)
    __swig_setmethods__["value"] = _nvcamera.CamProperty_value_set
    __swig_getmethods__["value"] = _nvcamera.CamProperty_value_get
    if _newclass:value = _swig_property(_nvcamera.CamProperty_value_get, _nvcamera.CamProperty_value_set)
    def getFloatElementAtIndex(self, index=0): return _nvcamera.CamProperty_getFloatElementAtIndex(self, index)
    def getUint32ElementAtIndex(self, index=0): return _nvcamera.CamProperty_getUint32ElementAtIndex(self, index)
    def getSint32ElementAtIndex(self, index=0): return _nvcamera.CamProperty_getSint32ElementAtIndex(self, index)
    def getUint8Pointer(self): return _nvcamera.CamProperty_getUint8Pointer(self)
    __swig_destroy__ = _nvcamera.delete_CamProperty
    __del__ = lambda self : None;
CamProperty_swigregister = _nvcamera.CamProperty_swigregister
CamProperty_swigregister(CamProperty)

NoiseReductionMode_Off = _nvcamera.NoiseReductionMode_Off
NoiseReductionMode_Fast = _nvcamera.NoiseReductionMode_Fast
NoiseReductionMode_HighQuality = _nvcamera.NoiseReductionMode_HighQuality
NoiseReductionMode_Force32 = _nvcamera.NoiseReductionMode_Force32
SpecialEffectsMode_Off = _nvcamera.SpecialEffectsMode_Off
SpecialEffectsMode_Mono = _nvcamera.SpecialEffectsMode_Mono
SpecialEffectsMode_Negative = _nvcamera.SpecialEffectsMode_Negative
SpecialEffectsMode_Solarize = _nvcamera.SpecialEffectsMode_Solarize
SpecialEffectsMode_Sepia = _nvcamera.SpecialEffectsMode_Sepia
SpecialEffectsMode_Posterize = _nvcamera.SpecialEffectsMode_Posterize
SpecialEffectsMode_Aqua = _nvcamera.SpecialEffectsMode_Aqua
SpecialEffectsMode_Force32 = _nvcamera.SpecialEffectsMode_Force32
AwbMode_Off = _nvcamera.AwbMode_Off
AwbMode_Auto = _nvcamera.AwbMode_Auto
AwbMode_Incandescent = _nvcamera.AwbMode_Incandescent
AwbMode_Fluorescent = _nvcamera.AwbMode_Fluorescent
AwbMode_WarmFluorescent = _nvcamera.AwbMode_WarmFluorescent
AwbMode_Daylight = _nvcamera.AwbMode_Daylight
AwbMode_CloudyDaylight = _nvcamera.AwbMode_CloudyDaylight
AwbMode_Twilight = _nvcamera.AwbMode_Twilight
AwbMode_Shade = _nvcamera.AwbMode_Shade
AwbMode_Manual = _nvcamera.AwbMode_Manual
AwbMode_Num_Total_Modes = _nvcamera.AwbMode_Num_Total_Modes
AwbMode_Force32 = _nvcamera.AwbMode_Force32
AeMode_Off = _nvcamera.AeMode_Off
AeMode_On = _nvcamera.AeMode_On
AeMode_OnAutoFlash = _nvcamera.AeMode_OnAutoFlash
AeMode_OnAlwaysFlash = _nvcamera.AeMode_OnAlwaysFlash
AeMode_On_AutoFlashRedEye = _nvcamera.AeMode_On_AutoFlashRedEye
AeMode_Force32 = _nvcamera.AeMode_Force32
AfMode_Off = _nvcamera.AfMode_Off
AfMode_Auto = _nvcamera.AfMode_Auto
AfMode_Macro = _nvcamera.AfMode_Macro
AfMode_ContinuousVideo = _nvcamera.AfMode_ContinuousVideo
AfMode_ContinuousPicture = _nvcamera.AfMode_ContinuousPicture
AfMode_ExtDepthOfField = _nvcamera.AfMode_ExtDepthOfField
AfMode_Force32 = _nvcamera.AfMode_Force32
ConcurrentRawDumpFlag_Off = _nvcamera.ConcurrentRawDumpFlag_Off
ConcurrentRawDumpFlag_Header = _nvcamera.ConcurrentRawDumpFlag_Header
ConcurrentRawDumpFlag_RawBuffer = _nvcamera.ConcurrentRawDumpFlag_RawBuffer
ConcurrentRawDumpFlag_WholeFile = _nvcamera.ConcurrentRawDumpFlag_WholeFile
ConcurrentRawDumpFlag_Force32 = _nvcamera.ConcurrentRawDumpFlag_Force32
NvCamAoHdrMode_Off = _nvcamera.NvCamAoHdrMode_Off
NvCamAoHdrMode_RowInterleaved = _nvcamera.NvCamAoHdrMode_RowInterleaved
NvCamAoHdrMode_Preprocessed = _nvcamera.NvCamAoHdrMode_Preprocessed
WbManualMode_AlgControlOff = _nvcamera.WbManualMode_AlgControlOff
WbManualMode_ResetReinitAlgs = _nvcamera.WbManualMode_ResetReinitAlgs
WbManualMode_RestoreAlgs = _nvcamera.WbManualMode_RestoreAlgs
WbManualMode_Force32 = _nvcamera.WbManualMode_Force32

def new_f32p():
  return _nvcamera.new_f32p()
new_f32p = _nvcamera.new_f32p

def copy_f32p(*args):
  return _nvcamera.copy_f32p(*args)
copy_f32p = _nvcamera.copy_f32p

def delete_f32p(*args):
  return _nvcamera.delete_f32p(*args)
delete_f32p = _nvcamera.delete_f32p

def f32p_assign(*args):
  return _nvcamera.f32p_assign(*args)
f32p_assign = _nvcamera.f32p_assign

def f32p_value(*args):
  return _nvcamera.f32p_value(*args)
f32p_value = _nvcamera.f32p_value
class uint64pc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, uint64pc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, uint64pc, name)
    __repr__ = _swig_repr
    def __init__(self):
        this = _nvcamera.new_uint64pc()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvcamera.delete_uint64pc
    __del__ = lambda self : None;
    def assign(self, *args): return _nvcamera.uint64pc_assign(self, *args)
    def value(self): return _nvcamera.uint64pc_value(self)
    def cast(self): return _nvcamera.uint64pc_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _nvcamera.uint64pc_frompointer
    if _newclass:frompointer = staticmethod(_nvcamera.uint64pc_frompointer)
uint64pc_swigregister = _nvcamera.uint64pc_swigregister
uint64pc_swigregister(uint64pc)

def uint64pc_frompointer(*args):
  return _nvcamera.uint64pc_frompointer(*args)
uint64pc_frompointer = _nvcamera.uint64pc_frompointer

class uint32pc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, uint32pc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, uint32pc, name)
    __repr__ = _swig_repr
    def __init__(self):
        this = _nvcamera.new_uint32pc()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvcamera.delete_uint32pc
    __del__ = lambda self : None;
    def assign(self, *args): return _nvcamera.uint32pc_assign(self, *args)
    def value(self): return _nvcamera.uint32pc_value(self)
    def cast(self): return _nvcamera.uint32pc_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _nvcamera.uint32pc_frompointer
    if _newclass:frompointer = staticmethod(_nvcamera.uint32pc_frompointer)
uint32pc_swigregister = _nvcamera.uint32pc_swigregister
uint32pc_swigregister(uint32pc)

def uint32pc_frompointer(*args):
  return _nvcamera.uint32pc_frompointer(*args)
uint32pc_frompointer = _nvcamera.uint32pc_frompointer

class f32pc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, f32pc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, f32pc, name)
    __repr__ = _swig_repr
    def __init__(self):
        this = _nvcamera.new_f32pc()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvcamera.delete_f32pc
    __del__ = lambda self : None;
    def assign(self, *args): return _nvcamera.f32pc_assign(self, *args)
    def value(self): return _nvcamera.f32pc_value(self)
    def cast(self): return _nvcamera.f32pc_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _nvcamera.f32pc_frompointer
    if _newclass:frompointer = staticmethod(_nvcamera.f32pc_frompointer)
f32pc_swigregister = _nvcamera.f32pc_swigregister
f32pc_swigregister(f32pc)

def f32pc_frompointer(*args):
  return _nvcamera.f32pc_frompointer(*args)
f32pc_frompointer = _nvcamera.f32pc_frompointer

class uint32_array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, uint32_array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, uint32_array, name)
    __repr__ = _swig_repr
    def __init__(self, *args):
        this = _nvcamera.new_uint32_array(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvcamera.delete_uint32_array
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _nvcamera.uint32_array___getitem__(self, *args)
    def __setitem__(self, *args): return _nvcamera.uint32_array___setitem__(self, *args)
    def cast(self): return _nvcamera.uint32_array_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _nvcamera.uint32_array_frompointer
    if _newclass:frompointer = staticmethod(_nvcamera.uint32_array_frompointer)
uint32_array_swigregister = _nvcamera.uint32_array_swigregister
uint32_array_swigregister(uint32_array)

def uint32_array_frompointer(*args):
  return _nvcamera.uint32_array_frompointer(*args)
uint32_array_frompointer = _nvcamera.uint32_array_frompointer

class sint32_array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sint32_array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sint32_array, name)
    __repr__ = _swig_repr
    def __init__(self, *args):
        this = _nvcamera.new_sint32_array(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvcamera.delete_sint32_array
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _nvcamera.sint32_array___getitem__(self, *args)
    def __setitem__(self, *args): return _nvcamera.sint32_array___setitem__(self, *args)
    def cast(self): return _nvcamera.sint32_array_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _nvcamera.sint32_array_frompointer
    if _newclass:frompointer = staticmethod(_nvcamera.sint32_array_frompointer)
sint32_array_swigregister = _nvcamera.sint32_array_swigregister
sint32_array_swigregister(sint32_array)

def sint32_array_frompointer(*args):
  return _nvcamera.sint32_array_frompointer(*args)
sint32_array_frompointer = _nvcamera.sint32_array_frompointer

class f32_array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, f32_array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, f32_array, name)
    __repr__ = _swig_repr
    def __init__(self, *args):
        this = _nvcamera.new_f32_array(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvcamera.delete_f32_array
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _nvcamera.f32_array___getitem__(self, *args)
    def __setitem__(self, *args): return _nvcamera.f32_array___setitem__(self, *args)
    def cast(self): return _nvcamera.f32_array_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _nvcamera.f32_array_frompointer
    if _newclass:frompointer = staticmethod(_nvcamera.f32_array_frompointer)
f32_array_swigregister = _nvcamera.f32_array_swigregister
f32_array_swigregister(f32_array)

def f32_array_frompointer(*args):
  return _nvcamera.f32_array_frompointer(*args)
f32_array_frompointer = _nvcamera.f32_array_frompointer

INVCAMERATOOLS_VERSION_MAJOR = _nvcamera.INVCAMERATOOLS_VERSION_MAJOR
INVCAMERATOOLS_VERSION_MINOR = _nvcamera.INVCAMERATOOLS_VERSION_MINOR
class Version(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Version, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Version, name)
    __repr__ = _swig_repr
    __swig_getmethods__["major"] = _nvcamera.Version_major_get
    if _newclass:major = _swig_property(_nvcamera.Version_major_get)
    __swig_getmethods__["minor"] = _nvcamera.Version_minor_get
    if _newclass:minor = _swig_property(_nvcamera.Version_minor_get)
    def __init__(self, *args):
        this = _nvcamera.new_Version(*args)
        try: self.this.append(this)
        except: self.this = this
    def isCompatible(self, *args): return _nvcamera.Version_isCompatible(self, *args)
    __swig_destroy__ = _nvcamera.delete_Version
    __del__ = lambda self : None;
Version_swigregister = _nvcamera.Version_swigregister
Version_swigregister(Version)

CamConst_CAP_READY = _nvcamera.CamConst_CAP_READY
CamConst_CAP_FILE_READY = _nvcamera.CamConst_CAP_FILE_READY
CamConst_AF_READY = _nvcamera.CamConst_AF_READY
CamConst_AF_TIMEOUT = _nvcamera.CamConst_AF_TIMEOUT
CamConst_AE_READY = _nvcamera.CamConst_AE_READY
CamConst_AE_TIMEOUT = _nvcamera.CamConst_AE_TIMEOUT
CamConst_AWB_READY = _nvcamera.CamConst_AWB_READY
CamConst_AWB_TIMEOUT = _nvcamera.CamConst_AWB_TIMEOUT
CamConst_PREVIEW_PAUSED = _nvcamera.CamConst_PREVIEW_PAUSED
CamConst_PREVIEW_EOS = _nvcamera.CamConst_PREVIEW_EOS
CamConst_FIRST_PREVIEW_FRAME = _nvcamera.CamConst_FIRST_PREVIEW_FRAME
CamConst_ALL_CAPTURE_DONE = _nvcamera.CamConst_ALL_CAPTURE_DONE
CamConst_POWER_ON_COMPLETE = _nvcamera.CamConst_POWER_ON_COMPLETE
CamConst_AF_CANCEL = _nvcamera.CamConst_AF_CANCEL
CamConst_AE_CANCEL = _nvcamera.CamConst_AE_CANCEL
CamConst_AWB_CANCEL = _nvcamera.CamConst_AWB_CANCEL
CamConst_LAST = _nvcamera.CamConst_LAST
CamConst_ALGS = _nvcamera.CamConst_ALGS
class ICaptureHandler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ICaptureHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ICaptureHandler, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def nextPreviewFrame(self, *args): return _nvcamera.ICaptureHandler_nextPreviewFrame(self, *args)
    def nextCapture(self, *args): return _nvcamera.ICaptureHandler_nextCapture(self, *args)
ICaptureHandler_swigregister = _nvcamera.ICaptureHandler_swigregister
ICaptureHandler_swigregister(ICaptureHandler)

class INvCameraTools(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, INvCameraTools, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, INvCameraTools, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def openImager(self, *args): return _nvcamera.INvCameraTools_openImager(self, *args)
    def getSupportedModes(self): return _nvcamera.INvCameraTools_getSupportedModes(self)
    def setSensorMode(self, *args): return _nvcamera.INvCameraTools_setSensorMode(self, *args)
    def setJpegResolution(self, *args): return _nvcamera.INvCameraTools_setJpegResolution(self, *args)
    def setJpegQuality(self, *args): return _nvcamera.INvCameraTools_setJpegQuality(self, *args)
    def initialize(self): return _nvcamera.INvCameraTools_initialize(self)
    def shutdown(self): return _nvcamera.INvCameraTools_shutdown(self)
    def startPreview(self): return _nvcamera.INvCameraTools_startPreview(self)
    def stopPreview(self): return _nvcamera.INvCameraTools_stopPreview(self)
    def setProperty(self, *args): return _nvcamera.INvCameraTools_setProperty(self, *args)
    def getProperty(self, *args): return _nvcamera.INvCameraTools_getProperty(self, *args)
    def setRawImage(self, *args): return _nvcamera.INvCameraTools_setRawImage(self, *args)
    def loadNVRawFile(self, *args): return _nvcamera.INvCameraTools_loadNVRawFile(self, *args)
    def loadNVRawData(self, *args): return _nvcamera.INvCameraTools_loadNVRawData(self, *args)
    def setHostInputIteration(self, *args): return _nvcamera.INvCameraTools_setHostInputIteration(self, *args)
    def captureRequest(self, *args): return _nvcamera.INvCameraTools_captureRequest(self, *args)
    def registerCaptureHandler(self, *args): return _nvcamera.INvCameraTools_registerCaptureHandler(self, *args)
    def closeImager(self): return _nvcamera.INvCameraTools_closeImager(self)
    __swig_destroy__ = _nvcamera.delete_INvCameraTools
    __del__ = lambda self : None;
    def halfPress(self, *args): return _nvcamera.INvCameraTools_halfPress(self, *args)
    def halfPressRelease(self): return _nvcamera.INvCameraTools_halfPressRelease(self)
    def waitForEvent(self, *args): return _nvcamera.INvCameraTools_waitForEvent(self, *args)
    def captureRequestGeneric(self, *args): return _nvcamera.INvCameraTools_captureRequestGeneric(self, *args)
    def captureRequestBayer(self, *args): return _nvcamera.INvCameraTools_captureRequestBayer(self, *args)
INvCameraTools_swigregister = _nvcamera.INvCameraTools_swigregister
INvCameraTools_swigregister(INvCameraTools)
NV_IMAGER_AUTO_BACK = _nvcamera.NV_IMAGER_AUTO_BACK
NV_IMAGER_AUTO_FRONT = _nvcamera.NV_IMAGER_AUTO_FRONT


def getNvCameraToolsVersion():
  return _nvcamera.getNvCameraToolsVersion()
getNvCameraToolsVersion = _nvcamera.getNvCameraToolsVersion

def createNvCameraTools(*args):
  return _nvcamera.createNvCameraTools(*args)
createNvCameraTools = _nvcamera.createNvCameraTools

def createCameraTools():
  return _nvcamera.createCameraTools()
createCameraTools = _nvcamera.createCameraTools

def deleteCameraTools(*args):
  return _nvcamera.deleteCameraTools(*args)
deleteCameraTools = _nvcamera.deleteCameraTools
class PropertyInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PropertyInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PropertyInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["propId"] = _nvcamera.PropertyInfo_propId_set
    __swig_getmethods__["propId"] = _nvcamera.PropertyInfo_propId_get
    if _newclass:propId = _swig_property(_nvcamera.PropertyInfo_propId_get, _nvcamera.PropertyInfo_propId_set)
    __swig_setmethods__["propType"] = _nvcamera.PropertyInfo_propType_set
    __swig_getmethods__["propType"] = _nvcamera.PropertyInfo_propType_get
    if _newclass:propType = _swig_property(_nvcamera.PropertyInfo_propType_get, _nvcamera.PropertyInfo_propType_set)
    __swig_setmethods__["count"] = _nvcamera.PropertyInfo_count_set
    __swig_getmethods__["count"] = _nvcamera.PropertyInfo_count_get
    if _newclass:count = _swig_property(_nvcamera.PropertyInfo_count_get, _nvcamera.PropertyInfo_count_set)
    __swig_setmethods__["name"] = _nvcamera.PropertyInfo_name_set
    __swig_getmethods__["name"] = _nvcamera.PropertyInfo_name_get
    if _newclass:name = _swig_property(_nvcamera.PropertyInfo_name_get, _nvcamera.PropertyInfo_name_set)
    def __init__(self):
        this = _nvcamera.new_PropertyInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvcamera.delete_PropertyInfo
    __del__ = lambda self : None;
PropertyInfo_swigregister = _nvcamera.PropertyInfo_swigregister
PropertyInfo_swigregister(PropertyInfo)


def getPropertyInfo(*args):
  return _nvcamera.getPropertyInfo(*args)
getPropertyInfo = _nvcamera.getPropertyInfo

def getPropertyString(*args):
  return _nvcamera.getPropertyString(*args)
getPropertyString = _nvcamera.getPropertyString

def getHostSensorGuid():
  return _nvcamera.getHostSensorGuid()
getHostSensorGuid = _nvcamera.getHostSensorGuid
class CaptureHandler(ICaptureHandler):
    __swig_setmethods__ = {}
    for _s in [ICaptureHandler]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CaptureHandler, name, value)
    __swig_getmethods__ = {}
    for _s in [ICaptureHandler]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CaptureHandler, name)
    __repr__ = _swig_repr
    def __init__(self, *args):
        this = _nvcamera.new_CaptureHandler(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvcamera.delete_CaptureHandler
    __del__ = lambda self : None;
    def nextPreviewFrame(self, *args): return _nvcamera.CaptureHandler_nextPreviewFrame(self, *args)
    def nextCapture(self, *args): return _nvcamera.CaptureHandler_nextCapture(self, *args)
CaptureHandler_swigregister = _nvcamera.CaptureHandler_swigregister
CaptureHandler_swigregister(CaptureHandler)
cvar = _nvcamera.cvar

attr_anr = _nvcamera.attr_anr
attr_autofocus = _nvcamera.attr_autofocus
attr_crop = _nvcamera.attr_crop
attr_bayergains = _nvcamera.attr_bayergains
attr_exposuretime = _nvcamera.attr_exposuretime
attr_exposuretimerange = _nvcamera.attr_exposuretimerange
attr_focuspos = _nvcamera.attr_focuspos
attr_pauseaftercapture = _nvcamera.attr_pauseaftercapture
attr_concurrentrawdumpflag = _nvcamera.attr_concurrentrawdumpflag
attr_continuousautofocus = _nvcamera.attr_continuousautofocus
attr_focuspositionphysicalrange = _nvcamera.attr_focuspositionphysicalrange
attr_focuspositioninf = _nvcamera.attr_focuspositioninf
attr_focuspositioninfoffset = _nvcamera.attr_focuspositioninfoffset
attr_focuspositionmacro = _nvcamera.attr_focuspositionmacro
attr_focuspositionmacrooffset = _nvcamera.attr_focuspositionmacrooffset
attr_gainrange = _nvcamera.attr_gainrange
attr_fuseid = _nvcamera.attr_fuseid
attr_aeoverride = _nvcamera.attr_aeoverride
attr_enableaohdr = _nvcamera.attr_enableaohdr
attr_scalesize = _nvcamera.attr_scalesize
import array
import sys
import os.path
from operator import itemgetter, attrgetter

TRUE_CONCURRENT_RAW_DISABLED = False

class Singleton(object):
    """ A Pythonic Singleton """
    def __new__(cls, *args, **kwargs):
        if '_inst' not in vars(cls):
            cls._inst = object.__new__(cls, *args, **kwargs)
        return cls._inst

class NvCamera(Singleton):
    """ A singleton wrapper class around NvCameraTools API"""
    _nvcameraToolsOb = None
    _isCaptureHandlerInitialized = False

    def getNvCameraTools(self):
        if (self._nvcameraToolsOb == None):
            self._nvcameraToolsOb = createCameraTools()

        return self._nvcameraToolsOb

    def deleteNvCameraTools(self):
        if (self._nvcameraToolsOb == None):
            return
        deleteCameraTools(self._nvcameraToolsOb)
        self._nvcameraToolsOb = None

    def setCaptureHandlerInitFlag(self, value):
         "set to True or False"
         self._isCaptureHandlerInitialized = value

    def getCaptureHandlerInitFlag(self):
         return self._isCaptureHandlerInitialized

class Graph:
    "nvcamera Graph class"

    def __init__(self):
        self._sensorModes = None

    def setImager(self, imagerId):
        "Sets the camera imager/sensor GUID"

        # This function also creates NvCameraTools API object
        # because this is the first operation expected from the
        # client scripts

        if (NvCamera().getNvCameraTools() == None):
            raise NvCameraException(NvError_InvalidState, "Couldn't initialize NvCameraTools API")
        if (imagerId == "host"):
            imagerId = getHostSensorGuid()
        return NvCamera().getNvCameraTools().openImager(imagerId)

    def preview(self, previewWidth = 0, previewHeight = 0):
        "Set preview mode"

        previewMode = None

        if (previewWidth == 0 or previewHeight == 0):
            # get the sensor modes
            sensorModesList = self.getSupportedModes()

            # find the largest rate with 30 fps
            # we might change this in future
            for mode in sensorModesList:
                if (mode.FrameRate == 30):
                    previewMode = mode
                    break
        else:
            previewMode = NvMMCameraSensorMode()
            previewMode.Resolution.width = previewWidth
            previewMode.Resolution.height = previewHeight

        print "Picking the preview resolution of %dx%d\n" % (previewMode.Resolution.width, previewMode.Resolution.height)
        err =  NvCamera().getNvCameraTools().setSensorMode(NvCameraCoreUseCase_Preview, previewMode)
        if (err != NvSuccess):
            raise NvCameraException(err, "Couldn't set preview sensor mode!")

        # set jpeg resolution
        jpegResolutionPreview = NvSize()
        jpegResolutionPreview.width = previewMode.Resolution.width
        jpegResolutionPreview.height = previewMode.Resolution.height
        err = NvCamera().getNvCameraTools().setJpegResolution(NvCameraCoreUseCase_Preview, jpegResolutionPreview)
        if (err != NvSuccess):
            raise NvCameraExpcetion(err, "Couldn't set preview jpeg resolution!")

    def run(self):
        "Inialize NvCameraTools API"

        # HACK to disable early graph
        #if (sys.platform.startswith("linux-arm")):
        #    print "disabling early graph"
        #    _disable_early_graph(1)

        return NvCamera().getNvCameraTools().initialize()

    def still(self, stillWidth = 0, stillHeight = 0, graphType = "Jpeg"):
        "Set still capture sensor mode"

        stillMode = None

        if (stillWidth == 0 or stillHeight == 0):
            # get the supported sensor modes
            sensorModesList = self.getSupportedModes()

            # get the largest resolution mode
            stillMode = sensorModesList[0]
        else:
            stillMode = NvMMCameraSensorMode()
            stillMode.Resolution.width = stillWidth
            stillMode.Resolution.height = stillHeight

        print "Picking the still resolution of %dx%d\n" % (stillMode.Resolution.width, stillMode.Resolution.height)
        # set jpeg resolution
        jpegResolutionStill = NvSize()
        jpegResolutionStill.width = stillMode.Resolution.width
        jpegResolutionStill.height = stillMode.Resolution.height
        err = NvCamera().getNvCameraTools().setJpegResolution(NvCameraCoreUseCase_Still, jpegResolutionStill)
        if (err != NvSuccess):
            raise NvCameraException(err, "Couldn't set still jpeg resolution!")

        # set jpeg quality
        err = NvCamera().getNvCameraTools().setJpegQuality(NvCameraCoreUseCase_Still, 90)
        if (err != NvSuccess):
            raise NvCameraException(err, "Couldn't set still jpeg quality!")

        return NvCamera().getNvCameraTools().setSensorMode(NvCameraCoreUseCase_Still, stillMode)

    def video(self, *args):
        "Add video capture graph"
        return NvError_NotImplemented

    def stop(self):
        "shutdown NvCameraTools API"
        err = NvCamera().getNvCameraTools().shutdown()

        NvCamera().setCaptureHandlerInitFlag(False)

        # HACK to enable early graph
        if (sys.platform.startswith("linux-arm")):
            print "Enabling early graph"
            _disable_early_graph(0)

        return err

    def close(self):
        "Closes the graph"

        err = NvCamera().getNvCameraTools().closeImager()
        if (err != NvSuccess):
            raise NvCameraException(err, "Couldn't close the imager")

        # this function also deletes NvCameaTools API object
        # because this is the last call expected from the
        # client scripts
        NvCamera().deleteNvCameraTools()

    def getSupportedModes(self):
        """ Gets sorted list supported sensor modes and store
            it locally as well. Sort order is descending with
            respect to (width, height) key
        """
        (err, modesList) = NvCamera().getNvCameraTools().getSupportedModes()
        if (err != NvSuccess):
            raise NvCameraException(err, "Couldn't get supported sensor modes!!")

        modesList.sort(key = attrgetter('Resolution.width', 'Resolution.height'), reverse = True)

        return modesList

class NvCameraPropertyOperationType:
    PROP_OP_TYPE_GET = 1
    PROP_OP_TYPE_SET = 2

class Camera:
    "nvcamera Camera Class"
    __concurrentRawImageDir = "/data/raw"

    def __init__(self):

        self._stillImageName = None

        NvCamera().getNvCameraTools()
        self.registerCaptureHandler()
        self._propertyManager = NvCameraPropertyManager()

    def registerCaptureHandler(self):
        print "Registering capture handler...\n"
        self._captureHandler = CaptureHandler(self.__nextPreviewFrame, self.__nextStillFrame)
        NvCamera().getNvCameraTools().registerCaptureHandler(self._captureHandler)
        NvCamera().setCaptureHandlerInitFlag(True)

    def startPreview(self, *args):
        "Start camera preview"

        if (not NvCamera().getCaptureHandlerInitFlag()):
            self.registerCaptureHandler()

        err = NvCamera().getNvCameraTools().startPreview()
        if (err != NvSuccess):
            raise NvCameraException(err, "Failed to start preview!")

    def setAttr(self, attrID, *args):
        "Sets camera attribute"
        if (args == None):
            raise NvCameraException(NvError_BadValue, "Invalid attribute value!")

        propertyId = self._propertyManager._getPropertyIdFromAttributeId(attrID)

        if (propertyId == PROP_NONE):
            # this is NOOP property. dont't do anything
            return

        retVal =  self._propertyManager.handleProperty( \
                   NvCameraPropertyOperationType.PROP_OP_TYPE_SET, \
                   propertyId, \
                   *args \
               )
        return retVal

    def getAttr(self, attrID):
        "Gets camera attribute"
        propertyId = self._propertyManager._getPropertyIdFromAttributeId(attrID)

        if (propertyId == PROP_NONE):
            # this is NOOP property. dont't do anything
            return

        return self._propertyManager.handleProperty( \
                      NvCameraPropertyOperationType.PROP_OP_TYPE_GET, \
                      propertyId \
               )

    def stopPreview(self):
        "Stops the camera preview"
        err = NvCamera().getNvCameraTools().stopPreview()
        if (err != NvSuccess):
            raise NvCameraException(err, "Failed to stop preview!")

    def setRawImage(self, header, pixelData, iteration):
        "Sets the raw image header and data"
        return NvCamera().getNvCameraTools().setRawImage(header, pixelData, iteration)

    def still(self, imageName, timeout = 10000):
        "capture still image"

        self._stillImageName = imageName
        # parse "imageName" to get the capture type (Bayer or YUV).
        basename = os.path.basename(imageName)
        name, suffix = os.path.splitext(basename)

        if (not NvCamera().getCaptureHandlerInitFlag()):
            self.registerCaptureHandler()

        if (TRUE_CONCURRENT_RAW_DISABLED):
            print "True concurrent raw is disabled...\n"
            # special HACK for concurrent raw dump
            # suffix will be .jpg and we need raw capture followed
            # by jpeg capture
            if (self.getAttr(_nvcamera.attr_concurrentrawdumpflag) == 7):
                self._stillImageName = Camera.__concurrentRawImageDir + "/" + name + "." + "nvraw"

                err = NvCamera().getNvCameraTools().captureRequestBayer(timeout)
                if (err != NvSuccess):
                    raise NvCameraException(err, "ERROR: Couldn't capture Bayer image during \
                                            concurrent raw capture!")
                self.waitForEvent(12000, _nvcamera.CamConst_CAP_READY)

            # reset the _stillImageName back to what it was
            self._stillImageName = imageName

        if (suffix == ".jpg" or suffix == ".jpeg" or suffix == ".yuv"):
            # do a YUV capture
            err = NvCamera().getNvCameraTools().captureRequest(timeout)
            if (err != NvSuccess):
                raise NvCameraException(err, "ERROR: Couldn't capture YUV image!")
        elif (suffix == ".nvraw"):
            # do a Bayer capture
            err = NvCamera().getNvCameraTools().captureRequestBayer(timeout)
            if (err != NvSuccess):
                raise NvCameraException(err, "ERROR: Couldn't capture Bayer image!")
        else:
            # unrecognized file format
            raise NvCameraException(NvError_BadValue, "ERROR: unrecognized file format!")

    def waitForEvent(self, *args):
        "wait for event(s)"
        # combine the list of events into event mask
        eventMask = 0
        timeout = args[0]
        for event in args[1:]:
            eventMask = eventMask | event

        # clear and ignore CAP_FILE_READY event because it is not going to be
        # sent by nvcameratools API
        if ((eventMask != _nvcamera.CamConst_ALGS) and \
            (eventMask & _nvcamera.CamConst_CAP_FILE_READY)):
            eventMask = eventMask & ~_nvcamera.CamConst_CAP_FILE_READY

        err = NvCamera().getNvCameraTools().waitForEvent(timeout, eventMask)
        if (err != NvSuccess):
            raise NvCameraException(err, "Failed to wait for event(s)!")

    def halfpress(self, *args):
        "execute halfpress"
        err = NvCamera().getNvCameraTools().halfPress(args[0])
        if (err != NvSuccess):
            raise NvCameraException(err, "halfpress failure!")

    def hp_release(self):
        "releases half press"
        err = NvCamera().getNvCameraTools().halfPressRelease()
        if (err != NvSuccess):
            raise NvCameraException(err, "halfpress release failure!")

    def startVideoRecording(self):
        "start video recording"
        #return self._oCameraImpl.operation(_nvcamera.cop_start_video)
        pass

    def stopVideoRecording(self):
        "stop video recording"
        #return self._oCameraImpl.operation(_nvcamera.cop_stop_video)
        pass

    def __nextStillFrame(self, data):
        f = open(self._stillImageName, "w")
        f.write(data)
        f.close()

        if (not TRUE_CONCURRENT_RAW_DISABLED):
            # special handling for concurrent raw capture
            # two consecutive buffers will be send by Tools API
            # jpeg buffer followed by raw buffer

            if (self.getAttr(_nvcamera.attr_concurrentrawdumpflag) == 7):
                # for now we use the hardcoded raw dump directory
                self._stillImageName = Camera.__concurrentRawImageDir + "/" + "NvCameraToolsRawDump" + "." +"nvraw"

    def __nextPreviewFrame(self, data):
        pass

class NvCameraException(Exception):
    """ this exception is raised when error occurs during
        graph/camera operations
    """

    def __init__(self, errorCode, msg = ""):
        self.value = errorCode
        self.msg = msg

    def __str__(self):
        return "ERROR: %s\nErrorCode: %s: %s" % \
                (self.msg, repr(self.value), _nvcamera.getErrorString(self.value))

def _disable_early_graph(state):
    """disables early graph if it is not already disabled.
       This function assumes that if the nv-camera-disable-early-graph
       property is set to 1 that means that the functionality is
       disabled in mediaserver and hence it won't restart media server
       in that case
    """
    earlyGraphState = 0
    try:
        earlyGraphState = _execute_cmd(["getprop", "nv-camera-disable-early-graph"])
        if (earlyGraphState.strip() == ""):
            earlyGraphState = 0
    except RuntimeError, err:
        pass

    if (state == int(earlyGraphState)):
        return

    _execute_cmd(["setprop", "nv-camera-disable-early-graph", str(state)])
    _restart_media_server()

def _restart_media_server():
    import re
    task_info = _execute_cmd(['ps', 'mediaserver'])

    m = re.search('^\S+\s+(\d+)\s+',task_info,re.MULTILINE)

    if (m == None):
        return

    pid = m.group(1)
    print "restarting media server"
    try:
        _execute_cmd(['kill', pid])
    except RuntimeError, err:
       # HACK
       # ignore run time error while killing the media server
       # sometimes it seems to exit with 255 status code
       print "WARNING: %s" % str(err)

def _execute_cmd(args, silent = False):
    """Execute the command as a subprocess.

       Returns the exit code of the process on success
       Exit the script on failure
    """
    import subprocess

    sys.stdout.flush()

    # For Windows we need to use the shell so the path is searched (Python/Windows bug)
    # For Android, using the shell complicates things
    p = subprocess.Popen(args, shell=sys.platform.startswith('win'), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (std_out_str, std_err_str) = p.communicate()
    returncode = p.returncode

    clean_std_out_str = std_out_str.translate(None,'\r')
    clean_std_err_str = std_err_str.translate(None,'\r')

    if (returncode != 0):
        raise RuntimeError("Error (%d) executing command: %s" % (returncode, " ".join(args)))

    return clean_std_out_str


class NvCameraPropertyManager(object):
    """Property manager class
    """
    def __init__(self):
        self.__initPropHandlerDict()

    def __initPropHandlerDict(self):
        self.propHandlerDict = { \
            PROP_EXPOSURE_TIME     : self._exposureTimeHandler, \
            PROP_FUSE_ID           : self._fuseIdHandler, \
            PROP_SENSOR_ANALOG_GAIN: self._sensorAnalogGainHandler \
        }

    def setPropery(self, camProp):
        return NvCamera().getNvCameraTools().setProperty(camProp)

    def getPropery(self, camProp):
        return NvCamera().getNvCameraTools().getProperty(camProp)

    def createCamPropertyObject(self, propertyId, type, count):
        # create the CamProperty Object
        camProp = CamProperty()
        camProp.id = propertyId
        camProp.type = type
        camProp.count = count

        return camProp

    def handleProperty(self, propOpType, propertyId, value = None):
        """ creates CamProperty object for a given
        Operation type (get/set), NVCS attribute and value
        """

        # check for property specific handler if any
        # call property specific handler if found or call
        # default property handler
        if (propertyId in self.propHandlerDict and self.propHandlerDict[propertyId] != None):
            return self.propHandlerDict[propertyId](propertyId, value, propOpType)
        else:
            return self._genericPropertyHandler(propertyId, value, propOpType)

    def convertCamPropertyToPyType(self, camProp):
        if(camProp.count > 1):
            retListVal = []
            for i in range(camProp.count):
                if(camProp.type == PROP_TYPE_UINT32):
                    retListVal.append(camProp.getUint32ElementAtIndex(i))
                if(camProp.type == PROP_TYPE_SINT32):
                    retListVal.append(camProp.getSint32ElementAtIndex(i))
                elif(camProp.type == PROP_TYPE_FLOAT):
                    retListVal.append(camProp.getFloatElementAtIndex(i))
            return retListVal
        elif(camProp.type == PROP_TYPE_UINT32):
            return camProp.getUint32ElementAtIndex(0)
        elif(camProp.type == PROP_TYPE_SINT32):
            return camProp.getSint32ElementAtIndex(0)
        elif(camProp.type == PROP_TYPE_UINT8):
            return camProp.value.u8 # this is not tested..
        elif(camProp.type == PROP_TYPE_FLOAT):
            return camProp.getFloatElementAtIndex(0)

    def checkPropertyType(self, propValue, propType):
        nativePropType = self.__getNativeTypeFromPropertyType(propType)
        if (isinstance(propValue, list)):
            # assumes list of homegeneous types
            if (isinstance(propValue[0], nativePropType)):
                return True
            else:
                return False
        elif (isinstance(propValue, nativePropType)):
            return True
        else:
            return False

    def assignPyTypeToCamProperty(self, propType, propValueArray, camProp):
        if (propType == PROP_TYPE_UINT32):
            camProp.value.u32 = propValueArray.cast()
        elif (propType == PROP_TYPE_UINT64):
            camProp.value.u64 = propValueArray.cast()
        elif (propType == PROP_TYPE_UINT8):
            camProp.value.u8 = propValueArray.cast()
        elif (propType == PROP_TYPE_FLOAT):
            camProp.value.f = propValueArray.cast()
        elif (propType == PROP_TYPE_BOOL):
            # at present we pass 1 for True and 0 for False
            camProp.value.u32 = propValueArray.cast()
        elif (propType == PROP_TYPE_SINT32):
            camProp.value.i32 = propValueArray.cast()

    def __getNativeTypeFromPropertyType(self, propType):
        if (propType == PROP_TYPE_UINT32 or propType == PROP_TYPE_SINT32):
            return int
        elif (propType == PROP_TYPE_UINT64):
            return long
        elif (propType == PROP_TYPE_UINT8):
            return str
        elif (propType == PROP_TYPE_FLOAT):
            return float
        elif (propType == PROP_TYPE_BOOL):
             # at present we pass 1 for True and 0 for False
             return int

    def getPropertyString(self, propertyId):
        return getPropertyString(propertyId)

    ####################Property Handler Functions #####################
    #handler functions are called to handle special cases like setting the
    #dependent properties etc..

    def _genericPropertyHandler(self, propertyId, value, propOpType):
        # get the property info [type, count, handler]
        propInfo = self._getPropertyInfo(propertyId)

        # check the property type
        if (propOpType == NvCameraPropertyOperationType.PROP_OP_TYPE_SET):
            bType = self.checkPropertyType(value, propInfo.propType)
            if (bType == False):
                raise NvCameraException(NvError_BadValue, "Invalid property type!")

        camProp = self.createCamPropertyObject(propertyId, propInfo.propType, propInfo.count)

        # create an array
        propValueArray = None
        if (propInfo.propType == PROP_TYPE_FLOAT):
            propValueArray = f32_array(propInfo.count)
        elif (propInfo.propType == PROP_TYPE_SINT32):
            propValueArray = sint32_array(propInfo.count)
        elif (propInfo.propType == PROP_TYPE_UINT32 or propInfo.propType == PROP_TYPE_BOOL):
            propValueArray = uint32_array(propInfo.count)

        # assign the value
        if (propOpType == NvCameraPropertyOperationType.PROP_OP_TYPE_SET):
            if(propInfo.count > 1):
                # array of values
                for i in range(propInfo.count):
                    propValueArray[i] = value[i]
            else:
                propValueArray[0] = value

        self.assignPyTypeToCamProperty(propInfo.propType, propValueArray, camProp)

        if (propOpType == NvCameraPropertyOperationType.PROP_OP_TYPE_SET):
            err = NvCamera().getNvCameraTools().setProperty(camProp)
            if (err != NvSuccess):
                raise NvCameraException(NvError_InvalidState, "Unable to set property %s" % self.getPropertyString(propertyId))
        else:
            err = NvCamera().getNvCameraTools().getProperty(camProp)
            if (err != NvSuccess):
                raise NvCameraException(NvError_InvalidState, "Unable to get property %s" % self.getPropertyString(propertyId))
            return self.convertCamPropertyToPyType(camProp)

    def _exposureTimeHandler(self, propertyId, value, propOpType):
        # dependent property PROP_AE_MODE
        # PROP_AE_MODE should be off in order to set manual exposure time

        if (propOpType == NvCameraPropertyOperationType.PROP_OP_TYPE_SET):
            # set PROP_AE_MODE to AeMode_Off
            self._genericPropertyHandler( \
                PROP_AE_MODE, \
                AeMode_Off, \
                NvCameraPropertyOperationType.PROP_OP_TYPE_SET \
             )

        # set exposure time
        return self._genericPropertyHandler(propertyId, value, propOpType)

    def _fuseIdHandler(self, propertyId, value, propOpType):
        # client scripts expects fuse id in the form
        # [x, [i1, i2, ...]] where x is the size of the fuzeId bytes
        # and i1, i2 are the fuze id unsinged integers
        # and tools API retuns in the form [x, i1, i2, ...], so we need
        # to convert it to the client expected form

        if (propOpType == NvCameraPropertyOperationType.PROP_OP_TYPE_GET):
            fuseIdData = self._genericPropertyHandler(propertyId, value, propOpType)

            retList = []
            retList.append(fuseIdData[0])
            retList.append(fuseIdData[1:])
            return retList
        else:
            return self._genericPropertyHandler(propertyId, value, propOpType)

    def _sensorAnalogGainHandler(self, propertyId, value, propOpType):
        # driver only sets single gain for all four channels

        if (propOpType == NvCameraPropertyOperationType.PROP_OP_TYPE_GET):
            channelGain = self._genericPropertyHandler(propertyId, value, propOpType)
            retList = [channelGain] * 4
            return retList
        else:
            # send in the first gain value for all four channels
            # sensor driver is writing second channel gain so we are using
            # 1 as index and not 0
            return self._genericPropertyHandler(propertyId, value[1], propOpType)

    ######################################################################
    def _getPropertyIdFromAttributeId(self, attributeId):
        # attribute id to property id mapping
        # attribute id which maps to property id PROP_NONE are not supported
        # right now
        if (attributeId == attr_anr): return PROP_NOISE_REDUCTION_MODE
        elif (attributeId == attr_autofocus): return PROP_AUTOFOCUS
        elif (attributeId == attr_exposuretime): return PROP_EXPOSURE_TIME
        elif (attributeId == attr_exposuretimerange): return PROP_EXPOSURE_TIMERANGE
        elif (attributeId == attr_focuspos): return PROP_FOCUS_POS
        elif (attributeId == attr_pauseaftercapture): return PROP_PAUSE_AFTER_CAPTURE
        elif (attributeId == attr_concurrentrawdumpflag): return PROP_CONCURRENT_RAW_DUMP_FLAG
        elif (attributeId == attr_continuousautofocus): return PROP_CONTINUOUS_AUTOFOCUS
        elif (attributeId == attr_focuspositionphysicalrange): return PROP_FOCUSINFO_PHYSRANGE
        elif (attributeId == attr_focuspositioninf): return PROP_FOCUSINFO_INF
        elif (attributeId == attr_focuspositioninfoffset):return PROP_FOCUSINFO_INF_OFFSET
        elif (attributeId == attr_focuspositionmacro): return PROP_FOCUSINFO_MACRO
        elif (attributeId == attr_focuspositionmacrooffset): return PROP_FOCUSINFO_MACRO_OFFSET
        elif (attributeId == attr_gainrange): return PROP_GAIN_RANGE
        elif (attributeId == attr_crop): return PROP_CROP_REGION
        elif (attributeId == attr_fuseid): return PROP_FUSE_ID
        elif (attributeId == attr_enableaohdr): return PROP_AOHDR_MODE
        elif (attributeId == attr_bayergains): return PROP_SENSOR_ANALOG_GAIN
        elif (attributeId == attr_scalesize): return PROP_SCALE_SIZE
        elif (attributeId == attr_aeoverride): \
            raise NvCameraException(NvError_NotImplemented, "attribute is not implemented!")
        else:
            raise NvCameraException(NvError_BadParameter, "Invalid attribute id!")

    def _getPropertyInfo(self, propertyId):
        """ function to NvCameraTools property info
        from property id
        """
        retList = []
        # this information might need to be implemented and requested from
        # NvCameraTools(?)
        # property type, count

        propInfo = getPropertyInfo(propertyId)
        if (propInfo != None):
            return propInfo
        else:
            raise NvCameraException(NvError_BadValue, "Invalid property id!")

# This file is compatible with both classic and new-style classes.


