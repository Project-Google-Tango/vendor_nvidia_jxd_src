/*
 * Copyright (c) 2007 - 2010 NVIDIA Corporation.  All rights reserved.
 *
 * NVIDIA Corporation and its licensors retain all intellectual property
 * and proprietary rights in and to this software and related documentation
 * and any modifications thereto.  Any use, reproduction, disclosure or
 * distribution of this software and related documentation without an express
 * license agreement from NVIDIA Corporation is strictly prohibited.
 */

/**
 * Defines the SDRAM parameter structure.
 *
 * Note that PLLM is used by EMC.
 */

#ifndef INCLUDED_NVBOOT_SDRAM_PARAM_H
#define INCLUDED_NVBOOT_SDRAM_PARAM_H

#if defined(__cplusplus)
extern "C"
{
#endif

typedef enum
{
    /// Specifies the memory type to be undefined
    NvBootMemoryType_None = 0,

    /// Specifies the memory type to be DDR SDRAM
    NvBootMemoryType_Ddr,

    /// Specifies the memory type to be LPDDR SDRAM
    NvBootMemoryType_LpDdr,

    /// Specifies the memory type to be DDR2 SDRAM
    NvBootMemoryType_Ddr2,

    /// Specifies the memory type to be LPDDR2 SDRAM
    NvBootMemoryType_LpDdr2,

    /// Specifies the memory type to be DDR3 SDRAM
    NvBootMemoryType_Ddr3,

    NvBootMemoryType_Num,
    NvBootMemoryType_Force32 = 0x7FFFFFF
} NvBootMemoryType;


/**
 * Defines the SDRAM parameter structure
 */
typedef struct NvBootSdramParamsRec
{
    // sdram data structure generated by tool warmboot_code_gen

    /// Specifies the type of memory device
    NvBootMemoryType MemoryType;

    /// MC/EMC clock source configuration
    /// 
    /// Specifies the CPCON value for PllM
    NvU32 PllMChargePumpSetupControl;
    /// Specifies the LPCON value for PllM
    NvU32 PllMLoopFilterSetupControl;
    /// Specifies the M value for PllM
    NvU32 PllMInputDivider;
    /// Specifies the N value for PllM
    NvU32 PllMFeedbackDivider;
    /// Specifies the P value for PllM
    NvU32 PllMPostDivider;
    /// Specifies the time to wait for PLLM to lock (in microseconds)
    NvU32 PllMStableTime;

    /// Specifies the divider for the EMC Clock Source
    NvU32 EmcClockDivider;
    /// Specifies the PLL source for the EMC Clock Source
    NvU32 EmcClockSource;
    /// Specifies the enable for using low jitter clock for the EMC Clock Source
    NvU32 EmcClockUsePllMUD;

    /// Auto-calibration of EMC pads
    /// 
    /// Specifies the value for EMC_AUTO_CAL_INTERVAL
    NvU32 EmcAutoCalInterval;
    /// Specifies the value for EMC_AUTO_CAL_CONFIG
    /// Note: Trigger bits are set by the SDRAM code.
    NvU32 EmcAutoCalConfig;
    /// Specifies the time for the calibration to stabilize (in microseconds)
    NvU32 EmcAutoCalWait;

    /// DRAM size information
    /// Specifies the value for EMC_ADR_CFG
    NvU32 EmcAdrCfg;

    /// Specifies the time to wait after asserting pin CKE (in microseconds)
    NvU32 EmcPinProgramWait;
    /// Specifies the extra delay before/after pin RESET/CKE command
    NvU32 EmcPinExtraWait;
    /// Specifies the extra delay after the first writing of EMC_TIMING_CONTROL
    NvU32 EmcTimingControlWait;

    /// Timing parameters required for the SDRAM
    /// 
    /// Specifies the value for EMC_RC
    NvU32 EmcRc;
    /// Specifies the value for EMC_RFC
    NvU32 EmcRfc;
    /// Specifies the value for EMC_RAS
    NvU32 EmcRas;
    /// Specifies the value for EMC_RP
    NvU32 EmcRp;
    /// Specifies the value for EMC_R2W
    NvU32 EmcR2w;
    /// Specifies the value for EMC_R2W
    NvU32 EmcW2r;
    /// Specifies the value for EMC_R2P
    NvU32 EmcR2p;
    /// Specifies the value for EMC_W2P
    NvU32 EmcW2p;
    /// Specifies the value for EMC_RD_RCD
    NvU32 EmcRdRcd;
    /// Specifies the value for EMC_WR_RCD
    NvU32 EmcWrRcd;
    /// Specifies the value for EMC_RRD
    NvU32 EmcRrd;
    /// Specifies the value for EMC_REXT
    NvU32 EmcRext;
    /// Specifies the value for EMC_WEXT
    NvU32 EmcWext;
    /// Specifies the value for EMC_WDV
    NvU32 EmcWdv;
    /// Specifies the value for EMC_QUSE
    NvU32 EmcQUse;
    /// Specifies the value for EMC_QRST
    NvU32 EmcQRst;
    /// Specifies the value for EMC_QSAFE
    NvU32 EmcQSafe;
    /// Specifies the value for EMC_RDV
    NvU32 EmcRdv;
    /// Specifies the value for EMC_CTT
    NvU32 EmcCtt;
    /// Specifies the value for EMC_CTT_DURATION
    NvU32 EmcCttDuration;
    /// Specifies the value for EMC_REFRESH
    NvU32 EmcRefresh;
    /// Specifies the value for EMC_BURST_REFRESH_NUM
    NvU32 EmcBurstRefreshNum;
    /// Specifies the value for EMC_PRE_REFRESH_REQ_CNT
    NvU32 EmcPreRefreshReqCnt;
    /// Specifies the value for EMC_PDEX2WR
    NvU32 EmcPdEx2Wr;
    /// Specifies the value for EMC_PDEX2RD
    NvU32 EmcPdEx2Rd;
    /// Specifies the value for EMC_PCHG2PDEN
    NvU32 EmcPChg2Pden;
    /// Specifies the value for EMC_ACT2PDEN
    NvU32 EmcAct2Pden;
    /// Specifies the value for EMC_AR2PDEN
    NvU32 EmcAr2Pden;
    /// Specifies the value for EMC_RW2PDEN
    NvU32 EmcRw2Pden;
    /// Specifies the value for EMC_TXSR
    NvU32 EmcTxsr;
    /// Specifies the value for EMC_TXSRDLL
    NvU32 EmcTxsrDll;
    /// Specifies the value for EMC_TCKE
    NvU32 EmcTcke;
    /// Specifies the value for EMC_TFAW
    NvU32 EmcTfaw;
    /// Specifies the value for EMC_TRPAB
    NvU32 EmcTrpab;
    /// Specifies the value for EMC_TCLKSTABLE
    NvU32 EmcTClkStable;
    /// Specifies the value for EMC_TCLKSTOP
    NvU32 EmcTClkStop;
    /// Specifies the value for EMC_TREFBW
    NvU32 EmcTRefBw;
    /// Specifies the value for EMC_QUSE_EXTRA
    NvU32 EmcQUseExtra;

    /// FBIO configuration values
    /// 
    /// Specifies the value for EMC_FBIO_CFG5
    NvU32 EmcFbioCfg5;
    /// Specifies the value for EMC_FBIO_CFG6
    NvU32 EmcFbioCfg6;
    /// Specifies the value for EMC_FBIO_SPARE
    NvU32 EmcFbioSpare;

    /// Specifies the value for EMC_CFG_RSV
    NvU32 EmcCfgRsv;

    /// MRS command values
    /// 
    /// Specifies the value for EMC_MRS
    NvU32 EmcMrs;
    /// Specifies the value for EMC_EMRS
    NvU32 EmcEmrs;
    /// Specifies the programming to LPDDR2 Mode Register 1 at cold boot
    NvU32 EmcMrw1;
    /// Specifies the programming to LPDDR2 Mode Register 2 at cold boot
    NvU32 EmcMrw2;
    /// Specifies the programming to LPDDR2 Mode Register 3 at cold boot
    NvU32 EmcMrw3;
    /// Specifies the programming to extra LPDDR2 Mode Register at cold boot
    NvU32 EmcMrwExtra;
    /// Specifies the programming to LPDDR2 Mode Register 1 at warm boot
    NvU32 EmcWarmBootMrw1;
    /// Specifies the programming to LPDDR2 Mode Register 2 at warm boot
    NvU32 EmcWarmBootMrw2;
    /// Specifies the programming to LPDDR2 Mode Register 3 at warm boot
    NvU32 EmcWarmBootMrw3;
    /// Specifies the programming to extra LPDDR2 Mode Register at warm boot
    NvU32 EmcWarmBootMrwExtra;
    /// Specify the enable of extra Mode Register programming at warm boot
    NvU32 EmcWarmBootExtraModeRegWriteEnable;
    /// Specify the enable of extra Mode Register programming at cold boot
    NvU32 EmcExtraModeRegWriteEnable;

    /// Specifies the EMC_MRW reset command value
    NvU32 EmcMrwResetCommand;
    /// Specifies the EMC Reset wait time (in microseconds)
    NvU32 EmcMrwResetNInitWait;
    /// Specifies the value for EMC_MRS_WAIT_CNT
    NvU32 EmcMrsWaitCnt;

    /// EMC miscellaneous configurations
    /// 
    /// Specifies the value for EMC_CFG
    NvU32 EmcCfg;
    /// Specifies the value for EMC_CFG_2
    NvU32 EmcCfg2;
    /// Specifies the value for EMC_DBG
    NvU32 EmcDbg;
    /// Specifies the value for EMC_CMDQ
    NvU32 EmcCmdQ;
    /// Specifies the value for EMC_MC2EMCQ
    NvU32 EmcMc2EmcQ;
    /// Specifies the value for EMC_DYN_SELF_REF_CONTROL
    NvU32 EmcDynSelfRefControl;

    /// Specifies the value for MEM_INIT_DONE
    NvU32 AhbArbitrationXbarCtrlMemInitDone;

    /// Specifies the value for EMC_CFG_DIG_DLL
    NvU32 EmcCfgDigDll;
    /// Specifies the value for EMC_CFG_DIG_DLL_PERIOD
    NvU32 EmcCfgDigDllPeriod;
    /// Specifies the vlaue of *DEV_SELECTN of various EMC registers
    NvU32 EmcDevSelect;

    /// Specifies the value for EMC_SEL_DPD_CTRL
    NvU32 EmcSelDpdCtrl;

    /// Pads trimmer delays
    /// 
    /// Specifies the value for EMC_DLL_XFORM_DQS0
    NvU32 EmcDllXformDqs0;
    /// Specifies the value for EMC_DLL_XFORM_DQS1
    NvU32 EmcDllXformDqs1;
    /// Specifies the value for EMC_DLL_XFORM_DQS2
    NvU32 EmcDllXformDqs2;
    /// Specifies the value for EMC_DLL_XFORM_DQS3
    NvU32 EmcDllXformDqs3;
    /// Specifies the value for EMC_DLL_XFORM_DQS4
    NvU32 EmcDllXformDqs4;
    /// Specifies the value for EMC_DLL_XFORM_DQS5
    NvU32 EmcDllXformDqs5;
    /// Specifies the value for EMC_DLL_XFORM_DQS6
    NvU32 EmcDllXformDqs6;
    /// Specifies the value for EMC_DLL_XFORM_DQS7
    NvU32 EmcDllXformDqs7;
    /// Specifies the value for EMC_DLL_XFORM_QUSE0
    NvU32 EmcDllXformQUse0;
    /// Specifies the value for EMC_DLL_XFORM_QUSE1
    NvU32 EmcDllXformQUse1;
    /// Specifies the value for EMC_DLL_XFORM_QUSE2
    NvU32 EmcDllXformQUse2;
    /// Specifies the value for EMC_DLL_XFORM_QUSE3
    NvU32 EmcDllXformQUse3;
    /// Specifies the value for EMC_DLL_XFORM_QUSE4
    NvU32 EmcDllXformQUse4;
    /// Specifies the value for EMC_DLL_XFORM_QUSE5
    NvU32 EmcDllXformQUse5;
    /// Specifies the value for EMC_DLL_XFORM_QUSE6
    NvU32 EmcDllXformQUse6;
    /// Specifies the value for EMC_DLL_XFORM_QUSE7
    NvU32 EmcDllXformQUse7;
    /// Specifies the value for EMC_DLI_TRIM_TXDQS0
    NvU32 EmcDliTrimTxDqs0;
    /// Specifies the value for EMC_DLI_TRIM_TXDQS1
    NvU32 EmcDliTrimTxDqs1;
    /// Specifies the value for EMC_DLI_TRIM_TXDQS2
    NvU32 EmcDliTrimTxDqs2;
    /// Specifies the value for EMC_DLI_TRIM_TXDQS3
    NvU32 EmcDliTrimTxDqs3;
    /// Specifies the value for EMC_DLI_TRIM_TXDQS4
    NvU32 EmcDliTrimTxDqs4;
    /// Specifies the value for EMC_DLI_TRIM_TXDQS5
    NvU32 EmcDliTrimTxDqs5;
    /// Specifies the value for EMC_DLI_TRIM_TXDQS6
    NvU32 EmcDliTrimTxDqs6;
    /// Specifies the value for EMC_DLI_TRIM_TXDQS7
    NvU32 EmcDliTrimTxDqs7;
    /// Specifies the value for EMC_DLL_XFORM_DQ0
    NvU32 EmcDllXformDq0;
    /// Specifies the value for EMC_DLL_XFORM_DQ1
    NvU32 EmcDllXformDq1;
    /// Specifies the value for EMC_DLL_XFORM_DQ2
    NvU32 EmcDllXformDq2;
    /// Specifies the value for EMC_DLL_XFORM_DQ3
    NvU32 EmcDllXformDq3;

    /// Specifies the delay after asserting CKE pin during a WarmBoot0
    /// sequence (in microseconds)
    NvU32 WarmBootWait;

    /// Specifies the value for EMC_CTT_TERM_CTRL
    NvU32 EmcCttTermCtrl;

    /// Specifies the value for EMC_ODT_WRITE
    NvU32 EmcOdtWrite;
    /// Specifies the value for EMC_ODT_WRITE
    NvU32 EmcOdtRead;

    /// Periodic ZQ calibration
    /// 
    /// Specifies the value for EMC_ZCAL_INTERVAL
    /// Value 0 disables ZQ calibration
    NvU32 EmcZcalInterval;
    /// Specifies the value for EMC_ZCAL_WAIT_CNT
    NvU32 EmcZcalWaitCnt;
    /// Specifies the value for EMC_ZCAL_MRW_CMD
    NvU32 EmcZcalMrwCmd;

    /// DRAM initialization sequence flow control
    /// 
    /// Specifies the MRS command value for resetting DLL
    NvU32 EmcMrsResetDll;
    /// Specifies the command for ZQ initialization of device 0
    NvU32 EmcZcalInitDev0;
    /// Specifies the command for ZQ initialization of device 1
    NvU32 EmcZcalInitDev1;
    /// Specifies the wait time after programming a ZQ initialization command
    /// (in microseconds)
    NvU32 EmcZcalInitWait;
    /// Specifies the enable for ZQ calibration at cold boot
    NvU32 EmcZcalColdBootEnable;
    /// Specifies the enable for ZQ calibration at warm boot
    NvU32 EmcZcalWarmBootEnable;
    /// Specifies the MRW command to LPDDR2 for ZQ calibration on warmboot
    /// Is issued to both devices separately
    NvU32 EmcMrwLpddr2ZcalWarmBoot;
    /// Specifies the ZQ command to DDR3 for ZQ calibration on warmboot
    /// Is issued to both devices separately
    NvU32 EmcZqCalDdr3WarmBoot;
    /// Specifies the wait time for ZQ calibration on warmboot
    /// (in microseconds)
    NvU32 EmcZcalWarmBootWait;
    /// Specifies the enable for DRAM Mode Register programming at warm boot
    NvU32 EmcMrsWarmBootEnable;
    /// Specifies the wait time after sending an MRS DLL reset command
    /// in microseconds)
    NvU32 EmcMrsResetDllWait;
    /// Specifies the first of two EMRS commands to initialize mode registers
    NvU32 EmcEmrsEmr2;
    /// Specifies the second of two EMRS commands to initialize mode registers
    NvU32 EmcEmrsEmr3;
    /// Specifies the extra MRS command to initialize mode registers
    NvU32 EmcMrsExtra;
    /// Specifies the programming to DDR3 Mode Register 0 at warm boot
    NvU32 EmcWarmBootMrs;
    /// Specifies the programming to DDR3 Mode Register 1 at warm boot
    NvU32 EmcWarmBootEmrs;
    /// Specifies the programming to DDR3 Mode Register 2 at warm boot
    NvU32 EmcWarmBootEmr2;
    /// Specifies the programming to DDR3 Mode Register 3 at warm boot
    NvU32 EmcWarmBootEmr3;
    /// Specifies the extra MRS command at warm boot
    NvU32 EmcWarmBootMrsExtra;
    /// Specifies the EMRS command to enable the DDR2 DLL
    NvU32 EmcEmrsDdr2DllEnable;
    /// Specifies the MRS command to reset the DDR2 DLL
    NvU32 EmcMrsDdr2DllReset;
    /// Specifies the EMRS command to set OCD calibration
    NvU32 EmcEmrsDdr2OcdCalib;
    /// Specifies the wait between initializing DDR and setting OCD
    /// calibration (in microseconds)
    NvU32 EmcDdr2Wait;
    /// Specifies the value for EMC_CLKEN_OVERRIDE
    NvU32 EmcClkenOverride;
    /// Specifies LOG2 of the extra refresh numbers after booting
    /// Program 0 to disable
    NvU32 EmcExtraRefreshNum;
    /// Specifies the master override for all EMC clocks
    NvU32 EmcClkenOverrideAllWarmBoot;
    /// Specifies the master override for all MC clocks
    NvU32 McClkenOverrideAllWarmBoot;
    /// Specifies digital dll period, choosing between 4 to 64 ms
    NvU32 EmcCfgDigDllPeriodWarmBoot;

    /// Pad controls
    /// 
    /// Specifies the value for PMC_VDDP_SEL
    NvU32 PmcVddpSel;
    /// Specifies the value for PMC_DDR_PWR
    NvU32 PmcDdrPwr;
    /// Specifies the value for PMC_DDR_CFG
    NvU32 PmcDdrCfg;
    /// Specifies the value for PMC_IO_DPD_REQ
    NvU32 PmcIoDpdReq;
    /// Specifies the value for PMC_E_NO_VTTGEN
    NvU32 PmcENoVttGen;
    /// Specifies the value for PMC_NO_IOPOWER
    NvU32 PmcNoIoPower;
    /// Specifies the value for EMC_XM2CMDPADCTRL
    NvU32 EmcXm2CmdPadCtrl;
    /// Specifies the value for EMC_XM2CMDPADCTRL2
    NvU32 EmcXm2CmdPadCtrl2;
    /// Specifies the value for EMC_XM2DQSPADCTRL
    NvU32 EmcXm2DqsPadCtrl;
    /// Specifies the value for EMC_XM2DQSPADCTRL2
    NvU32 EmcXm2DqsPadCtrl2;
    /// Specifies the value for EMC_XM2DQSPADCTRL3
    NvU32 EmcXm2DqsPadCtrl3;
    /// Specifies the value for EMC_XM2DQPADCTRL
    NvU32 EmcXm2DqPadCtrl;
    /// Specifies the value for EMC_XM2DQPADCTRL2
    NvU32 EmcXm2DqPadCtrl2;
    /// Specifies the value for EMC_XM2CLKPADCTRL
    NvU32 EmcXm2ClkPadCtrl;
    /// Specifies the value for EMC_XM2COMPPADCTRL
    NvU32 EmcXm2CompPadCtrl;
    /// Specifies the value for EMC_XM2VTTGENPADCTRL
    NvU32 EmcXm2VttGenPadCtrl;
    /// Specifies the value for EMC_XM2VTTGENPADCTRL2
    NvU32 EmcXm2VttGenPadCtrl2;
    /// Specifies the value for EMC_XM2QUSEPADCTRL
    NvU32 EmcXm2QUsePadCtrl;

    /// DRAM size information
    /// 
    /// Specifies the value for MC_EMEM_ADR_CFG
    NvU32 McEmemAdrCfg;
    /// Specifies the value for MC_EMEM_ADR_CFG_DEV0
    NvU32 McEmemAdrCfgDev0;
    /// Specifies the value for MC_EMEM_ADR_CFG_DEV1
    NvU32 McEmemAdrCfgDev1;

    /// Specifies the value for MC_EMEM_CFG which holds the external memory
    /// size (in KBytes)
    NvU32 McEmemCfg;

    /// MC arbitration configuration
    /// 
    /// Specifies the value for MC_EMEM_ARB_CFG
    NvU32 McEmemArbCfg;
    /// Specifies the value for MC_EMEM_ARB_OUTSTANDING_REQ
    NvU32 McEmemArbOutstandingReq;
    /// Specifies the value for MC_EMEM_ARB_TIMING_RCD
    NvU32 McEmemArbTimingRcd;
    /// Specifies the value for MC_EMEM_ARB_TIMING_RP
    NvU32 McEmemArbTimingRp;
    /// Specifies the value for MC_EMEM_ARB_TIMING_RC
    NvU32 McEmemArbTimingRc;
    /// Specifies the value for MC_EMEM_ARB_TIMING_RAS
    NvU32 McEmemArbTimingRas;
    /// Specifies the value for MC_EMEM_ARB_TIMING_FAW
    NvU32 McEmemArbTimingFaw;
    /// Specifies the value for MC_EMEM_ARB_TIMING_RRD
    NvU32 McEmemArbTimingRrd;
    /// Specifies the value for MC_EMEM_ARB_TIMING_RAP2PRE
    NvU32 McEmemArbTimingRap2Pre;
    /// Specifies the value for MC_EMEM_ARB_TIMING_WAP2PRE
    NvU32 McEmemArbTimingWap2Pre;
    /// Specifies the value for MC_EMEM_ARB_TIMING_R2R
    NvU32 McEmemArbTimingR2R;
    /// Specifies the value for MC_EMEM_ARB_TIMING_W2W
    NvU32 McEmemArbTimingW2W;
    /// Specifies the value for MC_EMEM_ARB_TIMING_R2W
    NvU32 McEmemArbTimingR2W;
    /// Specifies the value for MC_EMEM_ARB_TIMING_W2R
    NvU32 McEmemArbTimingW2R;
    /// Specifies the value for MC_EMEM_ARB_DA_TURNS
    NvU32 McEmemArbDaTurns;
    /// Specifies the value for MC_EMEM_ARB_DA_COVERS
    NvU32 McEmemArbDaCovers;
    /// Specifies the value for MC_EMEM_ARB_MISC0
    NvU32 McEmemArbMisc0;
    /// Specifies the value for MC_EMEM_ARB_MISC1
    NvU32 McEmemArbMisc1;
    /// Specifies the value for MC_EMEM_ARB_RING1_THROTTLE
    NvU32 McEmemArbRing1Throttle;
    /// Specifies the value for MC_EMEM_ARB_OVERRIDE
    NvU32 McEmemArbOverride;
    /// Specifies the value for MC_EMEM_ARB_RSV
    NvU32 McEmemArbRsv;

    /// Specifies the value for MC_CLKEN_OVERRIDE
    NvU32 McClkenOverride;

    // End of generated code by warmboot_code_gen
} NvBootSdramParams;

#if defined(__cplusplus)
}
#endif

#endif /* #ifndef INCLUDED_NVBOOT_SDRAM_PARAM_H */

