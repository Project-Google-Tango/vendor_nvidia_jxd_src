/*
 * Copyright (c) 2007-2013, NVIDIA CORPORATION.  All rights reserved.
 *
 * NVIDIA CORPORATION and its licensors retain all intellectual property
 * and proprietary rights in and to this software, related documentation
 * and any modifications thereto.  Any use, reproduction, disclosure or
 * distribution of this software and related documentation without an express
 * license agreement from NVIDIA CORPORATION is strictly prohibited
 */

#ifndef INCLUDED_DISPTABLE_H
#define INCLUDED_DISPTABLE_H

#include "nvcommon.h"
#include "nvrm_drf.h"
#include "ardisplay.h"
#include "ardisplay_b.h"
#include "dc_hal.h"

/**
 * Execute the given display table.
 *
 * This does not wait for reg_wr_safe or set the state activate.
 *
 * @param controller The controller number
 * @param num Number of writes
 * @param regs array of register offsets
 * @param vals array of register values
 */
void
DcExecTable( DcController *controller, NvU32 num, NvU32 *regs, NvU32 *vals );

/** Display Tables -- need to convert register offsets into byte addresses */

NvU32 DcLinearFilterTable_Regs[] =
{
    DC_WINC_B_H_FILTER_P00_0 * 4,
    DC_WINC_B_H_FILTER_P01_0 * 4,
    DC_WINC_B_H_FILTER_P02_0 * 4,
    DC_WINC_B_H_FILTER_P03_0 * 4,
    DC_WINC_B_H_FILTER_P04_0 * 4,
    DC_WINC_B_H_FILTER_P05_0 * 4,
    DC_WINC_B_H_FILTER_P06_0 * 4,
    DC_WINC_B_H_FILTER_P07_0 * 4,
    DC_WINC_B_H_FILTER_P08_0 * 4,
    DC_WINC_B_H_FILTER_P09_0 * 4,
    DC_WINC_B_H_FILTER_P0A_0 * 4,
    DC_WINC_B_H_FILTER_P0B_0 * 4,
    DC_WINC_B_H_FILTER_P0C_0 * 4,
    DC_WINC_B_H_FILTER_P0D_0 * 4,
    DC_WINC_B_H_FILTER_P0E_0 * 4,
    DC_WINC_B_H_FILTER_P0F_0 * 4,
};

NvU32 DcLinearFilterTable_Vals[] =
{
    /* h_filter_p00 */
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P00, B_H_FILTER_P00C0, 0 )   |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P00, B_H_FILTER_P00C1, 0 )   |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P00, B_H_FILTER_P00C2, 128 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P00, B_H_FILTER_P00C3, 0 )   |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P00, B_H_FILTER_P00C4, 0 )   |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P00, B_H_FILTER_P00C5, 0 ),

    /* h_filter_p01 */
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P01, B_H_FILTER_P01C0, 0 )   |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P01, B_H_FILTER_P01C1, 0 )   |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P01, B_H_FILTER_P01C2, 120 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P01, B_H_FILTER_P01C3, 8 )   |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P01, B_H_FILTER_P01C4, 0 )   |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P01, B_H_FILTER_P01C5, 0 ),

    /* h_filter_p02 */
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P02, B_H_FILTER_P02C0, 0 )   |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P02, B_H_FILTER_P02C1, 0 )   |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P02, B_H_FILTER_P02C2, 112 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P02, B_H_FILTER_P02C3, 16 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P02, B_H_FILTER_P02C4, 0 )   |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P02, B_H_FILTER_P02C5, 0 ),

    /* h_filter_p03 */
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P03, B_H_FILTER_P03C0, 0 )   |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P03, B_H_FILTER_P03C1, 0 )   |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P03, B_H_FILTER_P03C2, 104 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P03, B_H_FILTER_P03C3, 24 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P03, B_H_FILTER_P03C4, 0 )   |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P03, B_H_FILTER_P03C5, 0 ),

    /* h_filter_p04 */
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P04, B_H_FILTER_P04C0, 0 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P04, B_H_FILTER_P04C1, 0 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P04, B_H_FILTER_P04C2, 96 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P04, B_H_FILTER_P04C3, 32 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P04, B_H_FILTER_P04C4, 0 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P04, B_H_FILTER_P04C5, 0 ),

    /* h_filter_p05 */
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P05, B_H_FILTER_P05C0, 0 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P05, B_H_FILTER_P05C1, 0 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P05, B_H_FILTER_P05C2, 88 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P05, B_H_FILTER_P05C3, 40 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P05, B_H_FILTER_P05C4, 0 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P05, B_H_FILTER_P05C5, 0 ),

    /* h_filter_p06 */
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P06, B_H_FILTER_P06C0, 0 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P06, B_H_FILTER_P06C1, 0 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P06, B_H_FILTER_P06C2, 80 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P06, B_H_FILTER_P06C3, 48 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P06, B_H_FILTER_P06C4, 0 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P06, B_H_FILTER_P06C5, 0 ),

    /* h_filter_p07 */
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P07, B_H_FILTER_P07C0, 0 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P07, B_H_FILTER_P07C1, 0 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P07, B_H_FILTER_P07C2, 72 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P07, B_H_FILTER_P07C3, 56 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P07, B_H_FILTER_P07C4, 0 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P07, B_H_FILTER_P07C5, 0 ),

    /* h_filter_p08 */
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P08, B_H_FILTER_P08C0, 0 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P08, B_H_FILTER_P08C1, 0 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P08, B_H_FILTER_P08C2, 64 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P08, B_H_FILTER_P08C3, 64 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P08, B_H_FILTER_P08C4, 0 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P08, B_H_FILTER_P08C5, 0 ),

    /* h_filter_p09 */
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P09, B_H_FILTER_P09C0, 0 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P09, B_H_FILTER_P09C1, 0 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P09, B_H_FILTER_P09C2, 56 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P09, B_H_FILTER_P09C3, 72 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P09, B_H_FILTER_P09C4, 0 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P09, B_H_FILTER_P09C5, 0 ),

    /* h_filter_p0a */
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0A, B_H_FILTER_P0AC0, 0 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0A, B_H_FILTER_P0AC1, 0 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0A, B_H_FILTER_P0AC2, 48 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0A, B_H_FILTER_P0AC3, 80 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0A, B_H_FILTER_P0AC4, 0 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0A, B_H_FILTER_P0AC5, 0 ),

    /* h_filter_p0b */
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0B, B_H_FILTER_P0BC0, 0 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0B, B_H_FILTER_P0BC1, 0 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0B, B_H_FILTER_P0BC2, 40 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0B, B_H_FILTER_P0BC3, 88 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0B, B_H_FILTER_P0BC4, 0 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0B, B_H_FILTER_P0BC5, 0 ),

    /* h_filter_p0c */
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0C, B_H_FILTER_P0CC0, 0 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0C, B_H_FILTER_P0CC1, 0 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0C, B_H_FILTER_P0CC2, 32 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0C, B_H_FILTER_P0CC3, 96 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0C, B_H_FILTER_P0CC4, 0 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0C, B_H_FILTER_P0CC5, 0 ),

    /* h_filter_p0d */
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0D, B_H_FILTER_P0DC0, 0 )   |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0D, B_H_FILTER_P0DC1, 0 )   |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0D, B_H_FILTER_P0DC2, 24 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0D, B_H_FILTER_P0DC3, 104 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0D, B_H_FILTER_P0DC4, 0 )   |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0D, B_H_FILTER_P0DC5, 0 ),

    /* h_filter_p0e */
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0E, B_H_FILTER_P0EC0, 0 )   |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0E, B_H_FILTER_P0EC1, 0 )   |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0E, B_H_FILTER_P0EC2, 16 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0E, B_H_FILTER_P0EC3, 112 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0E, B_H_FILTER_P0EC4, 0 )   |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0E, B_H_FILTER_P0EC5, 0 ),

    /* h_filter_p0f */
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0F, B_H_FILTER_P0FC0, 0 )   |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0F, B_H_FILTER_P0FC1, 0 )   |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0F, B_H_FILTER_P0FC2, 8 )   |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0F, B_H_FILTER_P0FC3, 120 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0F, B_H_FILTER_P0FC4, 0 )   |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0F, B_H_FILTER_P0FC5, 0 ),
};

NvU32 DcNicestFilterTable_Regs[] =
{
    DC_WINC_B_H_FILTER_P00_0 * 4,
    DC_WINC_B_H_FILTER_P01_0 * 4,
    DC_WINC_B_H_FILTER_P02_0 * 4,
    DC_WINC_B_H_FILTER_P03_0 * 4,
    DC_WINC_B_H_FILTER_P04_0 * 4,
    DC_WINC_B_H_FILTER_P05_0 * 4,
    DC_WINC_B_H_FILTER_P06_0 * 4,
    DC_WINC_B_H_FILTER_P07_0 * 4,
    DC_WINC_B_H_FILTER_P08_0 * 4,
    DC_WINC_B_H_FILTER_P09_0 * 4,
    DC_WINC_B_H_FILTER_P0A_0 * 4,
    DC_WINC_B_H_FILTER_P0B_0 * 4,
    DC_WINC_B_H_FILTER_P0C_0 * 4,
    DC_WINC_B_H_FILTER_P0D_0 * 4,
    DC_WINC_B_H_FILTER_P0E_0 * 4,
    DC_WINC_B_H_FILTER_P0F_0 * 4,
};

NvU32 DcNicestFilterTable_Vals[] =
{
    /* h_filter_p00 */
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P00, B_H_FILTER_P00C0, 0 )   |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P00, B_H_FILTER_P00C1, 0 )   |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P00, B_H_FILTER_P00C2, 128 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P00, B_H_FILTER_P00C3, 0 )   |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P00, B_H_FILTER_P00C4, 0 )   |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P00, B_H_FILTER_P00C5, 0 ),

    /* h_filter_p01 */
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P01, B_H_FILTER_P01C0, 1 )   |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P01, B_H_FILTER_P01C1, (NvU32)-4 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P01, B_H_FILTER_P01C2, 124 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P01, B_H_FILTER_P01C3, 8 )   |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P01, B_H_FILTER_P01C4, (NvU32)-2 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P01, B_H_FILTER_P01C5, 1 ),

    /* h_filter_p02 */
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P02, B_H_FILTER_P02C0, 1 )   |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P02, B_H_FILTER_P02C1, (NvU32)-8 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P02, B_H_FILTER_P02C2, 122 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P02, B_H_FILTER_P02C3, 17 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P02, B_H_FILTER_P02C4, (NvU32)-5 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P02, B_H_FILTER_P02C5, 1 ),

    /* h_filter_p03 */
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P03, B_H_FILTER_P03C0, 2 )   |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P03, B_H_FILTER_P03C1, (NvU32)-11 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P03, B_H_FILTER_P03C2, 115 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P03, B_H_FILTER_P03C3, 27 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P03, B_H_FILTER_P03C4, (NvU32)-7 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P03, B_H_FILTER_P03C5, 2 ),

    /* h_filter_p04 */
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P04, B_H_FILTER_P04C0, 2 )   |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P04, B_H_FILTER_P04C1, (NvU32)-13 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P04, B_H_FILTER_P04C2, 109 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P04, B_H_FILTER_P04C3, 37 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P04, B_H_FILTER_P04C4, (NvU32)-9 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P04, B_H_FILTER_P04C5, 2 ),

    /* h_filter_p05 */
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P05, B_H_FILTER_P05C0, 3 )   |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P05, B_H_FILTER_P05C1, (NvU32)-15 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P05, B_H_FILTER_P05C2, 102 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P05, B_H_FILTER_P05C3, 47 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P05, B_H_FILTER_P05C4, (NvU32)-11 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P05, B_H_FILTER_P05C5, 2 ),

    /* h_filter_p06 */
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P06, B_H_FILTER_P06C0, 3 )   |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P06, B_H_FILTER_P06C1, (NvU32)-15 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P06, B_H_FILTER_P06C2, 94 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P06, B_H_FILTER_P06C3, 56 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P06, B_H_FILTER_P06C4, (NvU32)-13 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P06, B_H_FILTER_P06C5, 3 ),

    /* h_filter_p07 */
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P07, B_H_FILTER_P07C0, 3 )   |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P07, B_H_FILTER_P07C1, (NvU32)-16 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P07, B_H_FILTER_P07C2, 85 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P07, B_H_FILTER_P07C3, 67 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P07, B_H_FILTER_P07C4, (NvU32)-14 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P07, B_H_FILTER_P07C5, 3 ),

    /* h_filter_p08 */
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P08, B_H_FILTER_P08C0, 3 )   |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P08, B_H_FILTER_P08C1, (NvU32)-15 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P08, B_H_FILTER_P08C2, 76 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P08, B_H_FILTER_P08C3, 76 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P08, B_H_FILTER_P08C4, (NvU32)-15 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P08, B_H_FILTER_P08C5, 3 ),

    /* h_filter_p09 */
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P09, B_H_FILTER_P09C0, 3 )   |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P09, B_H_FILTER_P09C1, (NvU32)-14 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P09, B_H_FILTER_P09C2, 67 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P09, B_H_FILTER_P09C3, 85 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P09, B_H_FILTER_P09C4, (NvU32)-16 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P09, B_H_FILTER_P09C5, 3 ),

    /* h_filter_p0a */
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0A, B_H_FILTER_P0AC0, 3 )   |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0A, B_H_FILTER_P0AC1, (NvU32)-13 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0A, B_H_FILTER_P0AC2, 56 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0A, B_H_FILTER_P0AC3, 94 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0A, B_H_FILTER_P0AC4, (NvU32)-15 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0A, B_H_FILTER_P0AC5, 3 ),

    /* h_filter_p0b */
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0B, B_H_FILTER_P0BC0, 2 )   |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0B, B_H_FILTER_P0BC1, (NvU32)-11 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0B, B_H_FILTER_P0BC2, 47 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0B, B_H_FILTER_P0BC3, 102 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0B, B_H_FILTER_P0BC4, (NvU32)-15 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0B, B_H_FILTER_P0BC5, 3 ),

    /* h_filter_p0c */
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0C, B_H_FILTER_P0CC0, 2 )   |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0C, B_H_FILTER_P0CC1, (NvU32)-9 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0C, B_H_FILTER_P0CC2, 37 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0C, B_H_FILTER_P0CC3, 109 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0C, B_H_FILTER_P0CC4, (NvU32)-13 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0C, B_H_FILTER_P0CC5, 2 ),

    /* h_filter_p0d */
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0D, B_H_FILTER_P0DC0, 2 )   |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0D, B_H_FILTER_P0DC1, (NvU32)-7 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0D, B_H_FILTER_P0DC2, 27 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0D, B_H_FILTER_P0DC3, 115 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0D, B_H_FILTER_P0DC4, (NvU32)-11 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0D, B_H_FILTER_P0DC5, 2 ),

    /* h_filter_p0e */
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0E, B_H_FILTER_P0EC0, 1 )   |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0E, B_H_FILTER_P0EC1, (NvU32)-5 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0E, B_H_FILTER_P0EC2, 17 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0E, B_H_FILTER_P0EC3, 122 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0E, B_H_FILTER_P0EC4, (NvU32)-8 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0E, B_H_FILTER_P0EC5, 1 ),

    /* h_filter_p0f */
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0F, B_H_FILTER_P0FC0, 1 )   |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0F, B_H_FILTER_P0FC1, (NvU32)-2 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0F, B_H_FILTER_P0FC2, 8 )   |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0F, B_H_FILTER_P0FC3, 124 ) |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0F, B_H_FILTER_P0FC4, (NvU32)-4 )  |
    NV_DRF_NUM( DC_WINC, B_H_FILTER_P0F, B_H_FILTER_P0FC5, 1 ),
};

NvU32 DcVFilterTable_Regs[] =
{
    DC_WINC_B_V_FILTER_P00_0 * 4,
    DC_WINC_B_V_FILTER_P01_0 * 4,
    DC_WINC_B_V_FILTER_P02_0 * 4,
    DC_WINC_B_V_FILTER_P03_0 * 4,
    DC_WINC_B_V_FILTER_P04_0 * 4,
    DC_WINC_B_V_FILTER_P05_0 * 4,
    DC_WINC_B_V_FILTER_P06_0 * 4,
    DC_WINC_B_V_FILTER_P07_0 * 4,
    DC_WINC_B_V_FILTER_P08_0 * 4,
    DC_WINC_B_V_FILTER_P09_0 * 4,
    DC_WINC_B_V_FILTER_P0A_0 * 4,
    DC_WINC_B_V_FILTER_P0B_0 * 4,
    DC_WINC_B_V_FILTER_P0C_0 * 4,
    DC_WINC_B_V_FILTER_P0D_0 * 4,
    DC_WINC_B_V_FILTER_P0E_0 * 4,
    DC_WINC_B_V_FILTER_P0F_0 * 4,
};

NvU32 DcVFilterTable_Vals[] =
{
    /* v_filter_p00 */
    NV_DRF_NUM( DC_WINC, B_V_FILTER_P00, B_V_FILTER_P00C0, 128 ),

    /* v_filter_p01 */
    NV_DRF_NUM( DC_WINC, B_V_FILTER_P01, B_V_FILTER_P01C0, 120 ),

    /* v_filter_p02 */
    NV_DRF_NUM( DC_WINC, B_V_FILTER_P02, B_V_FILTER_P02C0, 112 ),

    /* v_filter_p03 */
    NV_DRF_NUM( DC_WINC, B_V_FILTER_P03, B_V_FILTER_P03C0, 104 ),

    /* v_filter_p04 */
    NV_DRF_NUM( DC_WINC, B_V_FILTER_P04, B_V_FILTER_P04C0, 96 ),

    /* v_filter_p05 */
    NV_DRF_NUM( DC_WINC, B_V_FILTER_P05, B_V_FILTER_P05C0, 88 ),

    /* v_filter_p06 */
    NV_DRF_NUM( DC_WINC, B_V_FILTER_P06, B_V_FILTER_P06C0, 80 ),

    /* v_filter_p07 */
    NV_DRF_NUM( DC_WINC, B_V_FILTER_P07, B_V_FILTER_P07C0, 72 ),

    /* v_filter_p08 */
    NV_DRF_NUM( DC_WINC, B_V_FILTER_P08, B_V_FILTER_P08C0, 64 ),

    /* v_filter_p09 */
    NV_DRF_NUM( DC_WINC, B_V_FILTER_P09, B_V_FILTER_P09C0, 56 ),

    /* v_filter_p0a */
    NV_DRF_NUM( DC_WINC, B_V_FILTER_P0A, B_V_FILTER_P0AC0, 48 ),

    /* v_filter_p0b */
    NV_DRF_NUM( DC_WINC, B_V_FILTER_P0B, B_V_FILTER_P0BC0, 40 ),

    /* v_filter_p0c */
    NV_DRF_NUM( DC_WINC, B_V_FILTER_P0C, B_V_FILTER_P0CC0, 32 ),

    /* v_filter_p0d */
    NV_DRF_NUM( DC_WINC, B_V_FILTER_P0D, B_V_FILTER_P0DC0, 24 ),

    /* v_filter_p0e */
    NV_DRF_NUM( DC_WINC, B_V_FILTER_P0E, B_V_FILTER_P0EC0, 16 ),

    /* v_filter_p0f */
    NV_DRF_NUM( DC_WINC, B_V_FILTER_P0F, B_V_FILTER_P0FC0, 8 ),
};

/** pin default configuration - enable all pins with high polarity */
NvU32 DcDefaultPinTable_Regs[] =
{
    DC_COM_PIN_OUTPUT_SELECT0_0 * 4,
    DC_COM_PIN_OUTPUT_SELECT1_0 * 4,
    DC_COM_PIN_OUTPUT_SELECT2_0 * 4,
    DC_COM_PIN_OUTPUT_SELECT3_0 * 4,
    DC_COM_PIN_OUTPUT_SELECT4_0 * 4,
    DC_COM_PIN_OUTPUT_SELECT5_0 * 4,
    DC_COM_PIN_OUTPUT_SELECT6_0 * 4,
    DC_COM_PIN_OUTPUT_ENABLE0_0 * 4,
    DC_COM_PIN_OUTPUT_POLARITY0_0 * 4,
    DC_COM_PIN_OUTPUT_ENABLE1_0 * 4,
    DC_COM_PIN_OUTPUT_POLARITY1_0 * 4,
    DC_COM_PIN_OUTPUT_ENABLE2_0 * 4,
    DC_COM_PIN_OUTPUT_POLARITY2_0 * 4,
    DC_COM_PIN_OUTPUT_ENABLE3_0 * 4,
    DC_COM_PIN_OUTPUT_POLARITY3_0 * 4,
};

NvU32 DcDefaultPinTable_Vals[] =
{
    /* output selects */
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT0, LD0_OUTPUT_SELECT, 0 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT0, LD1_OUTPUT_SELECT, 0 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT0, LD2_OUTPUT_SELECT, 0 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT0, LD3_OUTPUT_SELECT, 0 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT0, LD4_OUTPUT_SELECT, 0 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT0, LD5_OUTPUT_SELECT, 0 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT0, LD6_OUTPUT_SELECT, 0 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT0, LD7_OUTPUT_SELECT, 0 ),

    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT1, LD8_OUTPUT_SELECT, 0 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT1, LD9_OUTPUT_SELECT, 0 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT1, LD10_OUTPUT_SELECT, 0 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT1, LD11_OUTPUT_SELECT, 0 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT1, LD12_OUTPUT_SELECT, 0 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT1, LD13_OUTPUT_SELECT, 0 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT1, LD14_OUTPUT_SELECT, 0 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT1, LD15_OUTPUT_SELECT, 0 ),

    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT2, LD16_OUTPUT_SELECT, 0 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT2, LD17_OUTPUT_SELECT, 0 ),

    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT3, LPW0_OUTPUT_SELECT, 0 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT3, LPW1_OUTPUT_SELECT, 0 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT3, LPW2_OUTPUT_SELECT, 0 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT3, LSC0_OUTPUT_SELECT, 0 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT3, LSC1_OUTPUT_SELECT, 0 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT3, LVS_OUTPUT_SELECT, 0 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT3, LHS_OUTPUT_SELECT, 0 ),

    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT4, LHP0_OUTPUT_SELECT, 0 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT4, LHP1_OUTPUT_SELECT, 0 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT4, LHP2_OUTPUT_SELECT, 0 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT4, LVP0_OUTPUT_SELECT, 0 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT4, LVP1_OUTPUT_SELECT, 0 ),

    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT5, LM0_OUTPUT_SELECT, 0 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT5, LM1_OUTPUT_SELECT, 0 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT5, LDI_OUTPUT_SELECT, 0 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT5, LPP_OUTPUT_SELECT, 0 ),

    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT6, LSCK_OUTPUT_SELECT, 0 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT6, LSDA_OUTPUT_SELECT, 0 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT6, LCSN_OUTPUT_SELECT, 0 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT6, LDC_OUTPUT_SELECT, 0 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT6, LSPI_OUTPUT_SELECT, 0 ),

    /* pin group 0 */
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_ENABLE0, LD0_OUTPUT_ENABLE, ENABLE ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_ENABLE0, LD1_OUTPUT_ENABLE, ENABLE ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_ENABLE0, LD2_OUTPUT_ENABLE, ENABLE ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_ENABLE0, LD3_OUTPUT_ENABLE, ENABLE ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_ENABLE0, LD4_OUTPUT_ENABLE, ENABLE ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_ENABLE0, LD5_OUTPUT_ENABLE, ENABLE ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_ENABLE0, LD6_OUTPUT_ENABLE, ENABLE ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_ENABLE0, LD7_OUTPUT_ENABLE, ENABLE ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_ENABLE0, LD8_OUTPUT_ENABLE, ENABLE ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_ENABLE0, LD9_OUTPUT_ENABLE, ENABLE ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_ENABLE0, LD10_OUTPUT_ENABLE, ENABLE ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_ENABLE0, LD11_OUTPUT_ENABLE, ENABLE ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_ENABLE0, LD12_OUTPUT_ENABLE, ENABLE ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_ENABLE0, LD13_OUTPUT_ENABLE, ENABLE ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_ENABLE0, LD14_OUTPUT_ENABLE, ENABLE ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_ENABLE0, LD15_OUTPUT_ENABLE, ENABLE ),

    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY0, LD0_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY0, LD1_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY0, LD2_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY0, LD3_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY0, LD4_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY0, LD5_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY0, LD6_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY0, LD7_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY0, LD8_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY0, LD9_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY0, LD10_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY0, LD11_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY0, LD12_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY0, LD13_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY0, LD14_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY0, LD15_OUTPUT_POLARITY, HIGH ),

    /* pin group 1 */
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_ENABLE1, LD16_OUTPUT_ENABLE, ENABLE ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_ENABLE1, LD17_OUTPUT_ENABLE, ENABLE ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_ENABLE1, LPW0_OUTPUT_ENABLE, ENABLE ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_ENABLE1, LPW1_OUTPUT_ENABLE, ENABLE ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_ENABLE1, LPW2_OUTPUT_ENABLE, ENABLE ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_ENABLE1, LSC0_OUTPUT_ENABLE, ENABLE ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_ENABLE1, LSC1_OUTPUT_ENABLE, ENABLE ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_ENABLE1, LVS_OUTPUT_ENABLE, ENABLE ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_ENABLE1, LHS_OUTPUT_ENABLE, ENABLE ),

    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LD16_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LD17_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LPW0_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LPW1_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LPW2_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LSC0_OUTPUT_POLARITY, LOW ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LSC1_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LVS_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LHS_OUTPUT_POLARITY, HIGH ),

    /* pin group 2 */
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_ENABLE2, LHP0_OUTPUT_ENABLE, ENABLE ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_ENABLE2, LHP1_OUTPUT_ENABLE, ENABLE ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_ENABLE2, LHP2_OUTPUT_ENABLE, ENABLE ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_ENABLE2, LVP0_OUTPUT_ENABLE, ENABLE ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_ENABLE2, LVP1_OUTPUT_ENABLE, ENABLE ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_ENABLE2, LM0_OUTPUT_ENABLE, ENABLE ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_ENABLE2, LM1_OUTPUT_ENABLE, ENABLE ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_ENABLE2, LDI_OUTPUT_ENABLE, ENABLE ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_ENABLE2, LPP_OUTPUT_ENABLE, ENABLE ),

    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY2, LHP0_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY2, LHP1_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY2, LHP2_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY2, LVP0_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY2, LVP1_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY2, LM0_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY2, LM1_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY2, LDI_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY2, LPP_OUTPUT_POLARITY, HIGH ),

    /* pin group 3 */
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_ENABLE3, LSCK_OUTPUT_ENABLE, ENABLE ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_ENABLE3, LSDA_OUTPUT_ENABLE, ENABLE ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_ENABLE3, LCSN_OUTPUT_ENABLE, ENABLE ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_ENABLE3, LDC_OUTPUT_ENABLE, ENABLE ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_ENABLE3, LSPI_OUTPUT_ENABLE, ENABLE ),

    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY3, LSCK_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY3, LSDA_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY3, LCSN_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY3, LDC_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY3, LSPI_OUTPUT_POLARITY, HIGH ),
};

NvU32 DcPinMap_Single_Rgb18_Regs[] =
{
    DC_COM_PIN_OUTPUT_SELECT5_0 * 4,
    DC_COM_PIN_OUTPUT_SELECT6_0 * 4,
    DC_COM_PIN_OUTPUT_ENABLE2_0 * 4,

    DC_COM_PM1_CONTROL_0 * 4,
    DC_COM_PM1_DUTY_CYCLE_0 * 4,
};

NvU32 DcPinMap_Single_Rgb18_Vals[] =
{
    /* backlight */
    NV_DRF_NUM( DC, COM_PIN_OUTPUT_SELECT5, LM1_OUTPUT_SELECT, 3 ),

    /* data enable */
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT6, LSPI_OUTPUT_SELECT, 2 ),

    NV_DRF_DEF( DC_COM, PIN_OUTPUT_ENABLE2, LHP0_OUTPUT_ENABLE, ENABLE ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_ENABLE2, LHP1_OUTPUT_ENABLE, ENABLE ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_ENABLE2, LHP2_OUTPUT_ENABLE, ENABLE ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_ENABLE2, LVP0_OUTPUT_ENABLE, DISABLE ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_ENABLE2, LVP1_OUTPUT_ENABLE, DISABLE ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_ENABLE2, LM0_OUTPUT_ENABLE, ENABLE ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_ENABLE2, LM1_OUTPUT_ENABLE, ENABLE ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_ENABLE2, LDI_OUTPUT_ENABLE, DISABLE ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_ENABLE2, LPP_OUTPUT_ENABLE, DISABLE ),

    /* backlight stuff */
    NV_DRF_NUM( DC_COM, PM1_CONTROL, PM1_CLOCK_SELECT, 2 ) |
    NV_DRF_NUM( DC_COM, PM1_CONTROL, PM1_CLOCK_DIVIDER, 2 ) |
    NV_DRF_NUM( DC_COM, PM1_CONTROL, PM1_PERIOD, 4 ),

    NV_DRF_NUM( DC_COM, PM1_DUTY_CYCLE, PM1_DUTY_CYCLE, 4 ),
};

NvU32 DcPinMap_Single_Rgb24_Spi5_Regs[] =
{
    DC_COM_PIN_OUTPUT_SELECT4_0 * 4,
    DC_COM_PIN_OUTPUT_SELECT5_0 * 4,
    DC_COM_PIN_OUTPUT_SELECT6_0 * 4,
    DC_COM_PIN_OUTPUT_POLARITY1_0 * 4,
};

NvU32 DcPinMap_Single_Rgb24_Spi5_Vals[] =
{
    /* pixel data */
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT4, LVP0_OUTPUT_SELECT, 1 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT4, LVP1_OUTPUT_SELECT, 2 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT4, LHP0_OUTPUT_SELECT, 2 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT4, LHP1_OUTPUT_SELECT, 2 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT4, LHP2_OUTPUT_SELECT, 2 ),

    /* pixel data */
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT5, LPP_OUTPUT_SELECT, 2 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT5, LDI_OUTPUT_SELECT, 2 ),

    /* data enable */
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT6, LSPI_OUTPUT_SELECT, 2 ),

    /* h and v sync need to be active low */
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LD16_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LD17_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LPW0_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LPW1_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LPW2_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LSC0_OUTPUT_POLARITY, LOW ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LSC1_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LVS_OUTPUT_POLARITY, LOW ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LHS_OUTPUT_POLARITY, LOW ),
};

NvU32 DcPinMap_Single_Cpu18_Regs[] =
{
    // FIXME: the pixel clock polarity isn't ending up active low somehow.
    // need this here.
    DC_COM_PIN_OUTPUT_POLARITY1_0 * 4,
    DC_COM_PIN_OUTPUT_SELECT6_0 * 4,
};

NvU32 DcPinMap_Single_Cpu18_Vals[] =
{
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LD16_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LD17_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LPW0_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LPW1_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LPW2_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LSC0_OUTPUT_POLARITY, LOW ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LSC1_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LVS_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LHS_OUTPUT_POLARITY, HIGH ),

    /* enable vpulse1, output select 4 is not documented, but it's vpulse1 */
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT6, LSCK_OUTPUT_SELECT, 0 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT6, LSDA_OUTPUT_SELECT, 0 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT6, LCSN_OUTPUT_SELECT, 0 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT6, LDC_OUTPUT_SELECT, 4 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT6, LSPI_OUTPUT_SELECT, 0 ),
};

NvU32 DcPinMap_Single_Cpu24_Regs[] =
{
    // FIXME: the pixel clock polarity isn't ending up active low somehow.
    // need this here.
    DC_COM_PIN_OUTPUT_POLARITY1_0 * 4,
    DC_COM_PIN_OUTPUT_SELECT4_0 * 4,
    DC_COM_PIN_OUTPUT_SELECT5_0 * 4,
    DC_COM_PIN_OUTPUT_SELECT6_0 * 4,
};

NvU32 DcPinMap_Single_Cpu24_Vals[] =
{
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LD16_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LD17_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LPW0_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LPW1_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LPW2_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LSC0_OUTPUT_POLARITY, LOW ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LSC1_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LVS_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LHS_OUTPUT_POLARITY, HIGH ),

    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT4, LVP1_OUTPUT_SELECT, 2 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT4, LHP0_OUTPUT_SELECT, 2 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT4, LHP1_OUTPUT_SELECT, 2 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT4, LHP2_OUTPUT_SELECT, 2 ),

    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT5, LPP_OUTPUT_SELECT, 2 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT5, LDI_OUTPUT_SELECT, 2 ),

    /* enable vpulse1, output select 4 is not documented, but it's vpulse1 */
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT6, LSCK_OUTPUT_SELECT, 0 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT6, LSDA_OUTPUT_SELECT, 0 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT6, LCSN_OUTPUT_SELECT, 0 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT6, LDC_OUTPUT_SELECT, 4 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT6, LSPI_OUTPUT_SELECT, 0 ),
};

NvU32 DcPinMapFramegrabber_Regs[] =
{
    DC_COM_PIN_OUTPUT_SELECT3_0 * 4,
    DC_COM_PIN_OUTPUT_SELECT4_0 * 4,
    DC_COM_PIN_OUTPUT_SELECT5_0 * 4,
    DC_COM_PIN_OUTPUT_POLARITY1_0 * 4,
};

NvU32 DcPinMapFramegrabber_Vals[] =
{
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT3, LSC0_OUTPUT_SELECT, 0 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT3, LSC1_OUTPUT_SELECT, 2 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT3, LVS_OUTPUT_SELECT, 0 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT3, LHS_OUTPUT_SELECT, 0 ),

    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT4, LVP1_OUTPUT_SELECT, 2 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT4, LHP1_OUTPUT_SELECT, 2 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT4, LHP2_OUTPUT_SELECT, 2 ),

    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT5, LPP_OUTPUT_SELECT, 2 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT5, LDI_OUTPUT_SELECT, 2 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT5, LM1_OUTPUT_SELECT, 2 ),

    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LD16_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LD17_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LPW0_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LPW1_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LPW2_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LSC0_OUTPUT_POLARITY, LOW ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LSC1_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LVS_OUTPUT_POLARITY, LOW ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LHS_OUTPUT_POLARITY, LOW ),
};

NvU32 DcPinMapDualFramegrabber_Regs[] =
{
    DC_COM_PIN_OUTPUT_SELECT3_0 * 4,
    DC_COM_PIN_OUTPUT_SELECT4_0 * 4,
    DC_COM_PIN_OUTPUT_SELECT5_0 * 4,
    DC_COM_PIN_OUTPUT_SELECT0_0 * 4,
    DC_COM_PIN_OUTPUT_SELECT1_0 * 4,
    DC_COM_PIN_OUTPUT_SELECT2_0 * 4,
    DC_COM_PIN_OUTPUT_POLARITY1_0 * 4,
};

NvU32 DcPinMapDualFramegrabber_Vals[] =
{
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT3, LSC0_OUTPUT_SELECT, 0 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT3, LSC1_OUTPUT_SELECT, 0 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT3, LVS_OUTPUT_SELECT, 0 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT3, LHS_OUTPUT_SELECT, 0 ),

    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT4, LVP1_OUTPUT_SELECT, 0 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT4, LHP1_OUTPUT_SELECT, 0 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT4, LHP2_OUTPUT_SELECT, 2 ),

    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT5, LPP_OUTPUT_SELECT, 2 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT5, LDI_OUTPUT_SELECT, 2 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT5, LM1_OUTPUT_SELECT, 2 ),

    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT0, LD0_OUTPUT_SELECT, 2 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT0, LD1_OUTPUT_SELECT, 2 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT0, LD2_OUTPUT_SELECT, 2 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT0, LD3_OUTPUT_SELECT, 2 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT0, LD4_OUTPUT_SELECT, 2 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT0, LD5_OUTPUT_SELECT, 2 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT0, LD6_OUTPUT_SELECT, 2 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT0, LD7_OUTPUT_SELECT, 2 ),

    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT1, LD8_OUTPUT_SELECT, 2 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT1, LD9_OUTPUT_SELECT, 2 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT1, LD10_OUTPUT_SELECT, 2 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT1, LD11_OUTPUT_SELECT, 2 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT1, LD12_OUTPUT_SELECT, 2 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT1, LD13_OUTPUT_SELECT, 2 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT1, LD14_OUTPUT_SELECT, 2 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT1, LD15_OUTPUT_SELECT, 2 ),

    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT2, LD16_OUTPUT_SELECT, 2 ) |
    NV_DRF_NUM( DC_COM, PIN_OUTPUT_SELECT2, LD17_OUTPUT_SELECT, 2 ),

    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LD16_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LD17_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LPW0_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LPW1_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LPW2_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LSC0_OUTPUT_POLARITY, LOW ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LSC1_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LVS_OUTPUT_POLARITY, HIGH ) |
    NV_DRF_DEF( DC_COM, PIN_OUTPUT_POLARITY1, LHS_OUTPUT_POLARITY, HIGH ),
};

#endif
